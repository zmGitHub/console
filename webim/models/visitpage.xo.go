// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// VisitPage represents a row from 'custmchat.visit_page'.
type VisitPage struct {
	ID            string    `json:"id"`             // id
	EntID         string    `json:"ent_id"`         // ent_id
	VisitID       string    `json:"visit_id"`       // visit_id
	IP            string    `json:"ip"`             // ip
	Source        string    `json:"source"`         // source
	SourceKeyword string    `json:"source_keyword"` // source_keyword
	SourceDomain  string    `json:"source_domain"`  // source_domain
	SourceURL     string    `json:"source_url"`     // source_url
	Title         string    `json:"title"`          // title
	Domain        string    `json:"domain"`         // domain
	URL           string    `json:"url"`            // url
	CreatedAt     time.Time `json:"created_at"`     // created_at
	UpdatedAt     time.Time `json:"updated_at"`     // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the VisitPage exists in the database.
func (vp *VisitPage) Exists() bool {
	return vp._exists
}

// Deleted provides information if the VisitPage has been deleted from the database.
func (vp *VisitPage) Deleted() bool {
	return vp._deleted
}

// Insert inserts the VisitPage to the database.
func (vp *VisitPage) Insert(db XODB) error {
	var err error

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.visit_page (` +
		`id, ent_id, visit_id, ip, source, source_keyword, source_domain, source_url, title, domain, url, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, vp.ID, vp.EntID, vp.VisitID, vp.IP, vp.Source, vp.SourceKeyword, vp.SourceDomain, vp.SourceURL, vp.Title, vp.Domain, vp.URL, vp.CreatedAt, vp.UpdatedAt)
	_, err = db.Exec(sqlstr, vp.ID, vp.EntID, vp.VisitID, vp.IP, vp.Source, vp.SourceKeyword, vp.SourceDomain, vp.SourceURL, vp.Title, vp.Domain, vp.URL, vp.CreatedAt, vp.UpdatedAt)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the VisitPage in the database.
func (vp *VisitPage) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if vp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE custmchat.visit_page SET ` +
		`ent_id = ?, visit_id = ?, ip = ?, source = ?, source_keyword = ?, source_domain = ?, source_url = ?, title = ?, domain = ?, url = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, vp.EntID, vp.VisitID, vp.IP, vp.Source, vp.SourceKeyword, vp.SourceDomain, vp.SourceURL, vp.Title, vp.Domain, vp.URL, vp.CreatedAt, vp.UpdatedAt, vp.ID)
	_, err = db.Exec(sqlstr, vp.EntID, vp.VisitID, vp.IP, vp.Source, vp.SourceKeyword, vp.SourceDomain, vp.SourceURL, vp.Title, vp.Domain, vp.URL, vp.CreatedAt, vp.UpdatedAt, vp.ID)
	return err
}

// Save saves the VisitPage to the database.
func (vp *VisitPage) Save(db XODB) error {
	if vp.Exists() {
		return vp.Update(db)
	}

	return vp.Insert(db)
}

// Delete deletes the VisitPage from the database.
func (vp *VisitPage) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vp._exists {
		return nil
	}

	// if deleted, bail
	if vp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM custmchat.visit_page WHERE id = ?`

	// run query
	XOLog(sqlstr, vp.ID)
	_, err = db.Exec(sqlstr, vp.ID)
	if err != nil {
		return err
	}

	// set deleted
	vp._deleted = true

	return nil
}

// VisitPagesByEntIDVisitIDCreatedAt retrieves a row from 'custmchat.visit_page' as a VisitPage.
//
// Generated from index 'idx_ent_id_visit_id_create_at'.
func VisitPagesByEntIDVisitID(db XODB, entID string, visitID string) ([]*VisitPage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, visit_id, ip, source, source_keyword, source_domain, source_url, title, domain, url, created_at, updated_at ` +
		`FROM custmchat.visit_page ` +
		`WHERE ent_id = ? AND visit_id = ? ` +
		`ORDER BY created_at DESC`

	q, err := db.Query(sqlstr, entID, visitID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VisitPage{}
	for q.Next() {
		vp := VisitPage{
			_exists: true,
		}

		// scan
		err = q.Scan(&vp.ID, &vp.EntID, &vp.VisitID, &vp.IP, &vp.Source, &vp.SourceKeyword, &vp.SourceDomain, &vp.SourceURL, &vp.Title, &vp.Domain, &vp.URL, &vp.CreatedAt, &vp.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &vp)
	}

	return res, nil
}

// VisitPageByID retrieves a row from 'custmchat.visit_page' as a VisitPage.
//
// Generated from index 'visit_page_id_pkey'.
func VisitPageByID(db XODB, id string) (*VisitPage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, visit_id, ip, source, source_keyword, source_domain, source_url, title, domain, url, created_at, updated_at ` +
		`FROM custmchat.visit_page ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	vp := VisitPage{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&vp.ID, &vp.EntID, &vp.VisitID, &vp.IP, &vp.Source, &vp.SourceKeyword, &vp.SourceDomain, &vp.SourceURL, &vp.Title, &vp.Domain, &vp.URL, &vp.CreatedAt, &vp.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &vp, nil
}
