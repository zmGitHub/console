// Package new_models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

var (
	MessageTextContentType    = "text"      // 文本
	MessageRichTextType       = "rich_text" // 富文本
	MessagePictureContentType = "photo"     // 图片
	MessageStickerContentType = "sticker"   // 表情
	MessageFileContentType    = "file"      // 文件

	MessageContentTypes = map[string]bool{
		MessageTextContentType:    true,
		MessagePictureContentType: true,
		MessageStickerContentType: true,
		MessageFileContentType:    true,
	}

	MessageFromAgentType   = "agent"
	MessageFromVisitorType = "client"

	MessageMsgInternalType = "internal"
	MessageMsgPublicType   = "public"
	MessageMsgSystemType   = "system"
)

// Message represents a row from 'custmchat.message'.
type Message struct {
	ID             string         `json:"id"`              // id
	EntID          string         `json:"ent_id"`          // ent_id
	TraceID        string         `json:"trace_id"`        // trace_id
	AgentID        string         `json:"agent_id"`        // agent_id
	ConversationID string         `json:"conversation_id"` // conversation_id
	FromType       sql.NullString `json:"from_type"`       // from_type
	ContentType    sql.NullString `json:"content_type"`    // content_type
	CreatedAt      time.Time      `json:"created_at"`      // created_at
	ReadTime       mysql.NullTime `json:"read_time"`       // read_time
	Content        sql.NullString `json:"content"`         // content
	MsgType        sql.NullString `json:"msg_type"`        // msg_type
	Extra          sql.NullString `json:"extra"`           // extra

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Message exists in the database.
func (m *Message) Exists() bool {
	return m._exists
}

// Deleted provides information if the Message has been deleted from the database.
func (m *Message) Deleted() bool {
	return m._deleted
}

// Insert inserts the Message to the database.
func (m *Message) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.message (` +
		`id, ent_id, trace_id, agent_id, conversation_id, from_type, content_type, created_at, read_time, content, msg_type, extra` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, m.ID, m.EntID, m.TraceID, m.AgentID, m.ConversationID, m.FromType, m.ContentType, m.CreatedAt, m.ReadTime, m.Content, m.MsgType, m.Extra)
	_, err = db.Exec(sqlstr, m.ID, m.EntID, m.TraceID, m.AgentID, m.ConversationID, m.FromType, m.ContentType, m.CreatedAt, m.ReadTime, m.Content, m.MsgType, m.Extra)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Update updates the Message in the database.
func (m *Message) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if m._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE custmchat.message SET ` +
		`ent_id = ?, trace_id = ?, agent_id = ?, conversation_id = ?, from_type = ?, content_type = ?, created_at = ?, read_time = ?, content = ?, msg_type = ?, extra = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, m.EntID, m.TraceID, m.AgentID, m.ConversationID, m.FromType, m.ContentType, m.CreatedAt, m.ReadTime, m.Content, m.MsgType, m.Extra, m.ID)
	_, err = db.Exec(sqlstr, m.EntID, m.TraceID, m.AgentID, m.ConversationID, m.FromType, m.ContentType, m.CreatedAt, m.ReadTime, m.Content, m.MsgType, m.Extra, m.ID)
	return err
}

// Save saves the Message to the database.
func (m *Message) Save(db XODB) error {
	if m.Exists() {
		return m.Update(db)
	}

	return m.Insert(db)
}

// Delete deletes the Message from the database.
func (m *Message) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return nil
	}

	// if deleted, bail
	if m._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM custmchat.message WHERE id = ?`

	// run query
	XOLog(sqlstr, m.ID)
	_, err = db.Exec(sqlstr, m.ID)
	if err != nil {
		return err
	}

	// set deleted
	m._deleted = true

	return nil
}

// MessagesByConversationID retrieves a row from 'custmchat.message' as a Message.
//
// Generated from index 'idx_conversation_id'.
func MessagesByConversationID(db XODB, conversationID string, offset, limit int) ([]*Message, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, trace_id, agent_id, conversation_id, from_type, content_type, created_at, read_time, content, msg_type, extra ` +
		`FROM custmchat.message ` +
		`WHERE conversation_id = ? ` +
		`ORDER BY created_at ASC ` +
		`LIMIT ?,?`

	// run query
	XOLog(sqlstr, conversationID, offset, limit)
	q, err := db.Query(sqlstr, conversationID, offset, limit)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*Message
	for q.Next() {
		m := Message{
			_exists: true,
		}

		// scan
		err = q.Scan(&m.ID, &m.EntID, &m.TraceID, &m.AgentID, &m.ConversationID, &m.FromType, &m.ContentType, &m.CreatedAt, &m.ReadTime, &m.Content, &m.MsgType, &m.Extra)
		if err != nil {
			return nil, err
		}

		res = append(res, &m)
	}
	if err = q.Err(); err != nil {
		return nil, err
	}

	return res, nil
}

// MessageByID retrieves a row from 'custmchat.message' as a Message.
//
// Generated from index 'message_id_pkey'.
func MessageByID(db XODB, id string) (*Message, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, trace_id, agent_id, conversation_id, from_type, content_type, created_at, read_time, content, msg_type, extra ` +
		`FROM custmchat.message ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	m := Message{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&m.ID, &m.EntID, &m.TraceID, &m.AgentID, &m.ConversationID, &m.FromType, &m.ContentType, &m.CreatedAt, &m.ReadTime, &m.Content, &m.MsgType, &m.Extra)
	if err != nil {
		return nil, err
	}

	return &m, nil
}

// MessagesByEntIDTraceIDCreatedAt retrieves a row from 'custmchat.message' as a Message.
//
// Generated from index 'msg_find_by_ent_and_track'.
func MessagesByEntIDTraceIDCreatedAt(db XODB, entID string, traceID string, createdAt mysql.NullTime) ([]*Message, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, trace_id, agent_id, conversation_id, from_type, content_type, created_at, read_time, content, msg_type, extra ` +
		`FROM custmchat.message ` +
		`WHERE ent_id = ? AND trace_id = ? AND created_at = ?`

	// run query
	XOLog(sqlstr, entID, traceID, createdAt)
	q, err := db.Query(sqlstr, entID, traceID, createdAt)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Message{}
	for q.Next() {
		m := Message{
			_exists: true,
		}

		// scan
		err = q.Scan(&m.ID, &m.EntID, &m.TraceID, &m.AgentID, &m.ConversationID, &m.FromType, &m.ContentType, &m.CreatedAt, &m.ReadTime, &m.Content, &m.MsgType, &m.Extra)
		if err != nil {
			return nil, err
		}

		res = append(res, &m)
	}

	return res, nil
}
