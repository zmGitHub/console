// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// InvitationLooksPriority represents a row from 'custmchat.invitation_looks_priority'.
type InvitationLooksPriority struct {
	EntID     string    `json:"ent_id"`     // ent_id
	Priority  string    `json:"priority"`   // priority
	CreatedAt time.Time `json:"created_at"` // created_at
	UpdatedAt time.Time `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the InvitationLooksPriority exists in the database.
func (ilp *InvitationLooksPriority) Exists() bool {
	return ilp._exists
}

// Deleted provides information if the InvitationLooksPriority has been deleted from the database.
func (ilp *InvitationLooksPriority) Deleted() bool {
	return ilp._deleted
}

// Insert inserts the InvitationLooksPriority to the database.
func (ilp *InvitationLooksPriority) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ilp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.invitation_looks_priority (` +
		`ent_id, priority, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ilp.EntID, ilp.Priority, ilp.CreatedAt, ilp.UpdatedAt)
	_, err = db.Exec(sqlstr, ilp.EntID, ilp.Priority, ilp.CreatedAt, ilp.UpdatedAt)
	if err != nil {
		return err
	}

	// set existence
	ilp._exists = true

	return nil
}

// Update updates the InvitationLooksPriority in the database.
func (ilp *InvitationLooksPriority) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ilp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ilp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE custmchat.invitation_looks_priority SET ` +
		`priority = ?, created_at = ?, updated_at = ?` +
		` WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, ilp.Priority, ilp.CreatedAt, ilp.UpdatedAt, ilp.EntID)
	_, err = db.Exec(sqlstr, ilp.Priority, ilp.CreatedAt, ilp.UpdatedAt, ilp.EntID)
	return err
}

// Save saves the InvitationLooksPriority to the database.
func (ilp *InvitationLooksPriority) Save(db XODB) error {
	if ilp.Exists() {
		return ilp.Update(db)
	}

	return ilp.Insert(db)
}

// Delete deletes the InvitationLooksPriority from the database.
func (ilp *InvitationLooksPriority) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ilp._exists {
		return nil
	}

	// if deleted, bail
	if ilp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM custmchat.invitation_looks_priority WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, ilp.EntID)
	_, err = db.Exec(sqlstr, ilp.EntID)
	if err != nil {
		return err
	}

	// set deleted
	ilp._deleted = true

	return nil
}

// InvitationLooksPriorityByEntID retrieves a row from 'custmchat.invitation_looks_priority' as a InvitationLooksPriority.
//
// Generated from index 'invitation_looks_priority_ent_id_pkey'.
func InvitationLooksPriorityByEntID(db XODB, entID string) (*InvitationLooksPriority, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ent_id, priority, created_at, updated_at ` +
		`FROM custmchat.invitation_looks_priority ` +
		`WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, entID)
	ilp := InvitationLooksPriority{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, entID).Scan(&ilp.EntID, &ilp.Priority, &ilp.CreatedAt, &ilp.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &ilp, nil
}
