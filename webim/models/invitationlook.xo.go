// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// InvitationLook represents a row from 'custmchat.invitation_looks'.
type InvitationLook struct {
	RuleID      string         `json:"rule_id"`      // rule_id
	EntID       string         `json:"ent_id"`       // ent_id
	Name        string         `json:"name"`         // name
	Target      string         `json:"target"`       // target
	BeginOn     time.Time      `json:"begin_on"`     // begin_on
	ExpireOn    mysql.NullTime `json:"expire_on"`    // expire_on
	Enabled     bool           `json:"enabled"`      // enabled
	StyleConfig string         `json:"style_config"` // style_config
	IsAny       bool           `json:"is_any"`       // is_any
	Version     string         `json:"version"`      // version
	CreatedAt   time.Time      `json:"created_at"`   // created_at
	UpdatedAt   time.Time      `json:"updated_at"`   // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the InvitationLook exists in the database.
func (il *InvitationLook) Exists() bool {
	return il._exists
}

// Deleted provides information if the InvitationLook has been deleted from the database.
func (il *InvitationLook) Deleted() bool {
	return il._deleted
}

// Insert inserts the InvitationLook to the database.
func (il *InvitationLook) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if il._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.invitation_looks (` +
		`rule_id, ent_id, name, target, begin_on, expire_on, enabled, style_config, is_any, version, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, il.RuleID, il.EntID, il.Name, il.Target, il.BeginOn, il.ExpireOn, il.Enabled, il.StyleConfig, il.IsAny, il.Version, il.CreatedAt, il.UpdatedAt)
	_, err = db.Exec(sqlstr, il.RuleID, il.EntID, il.Name, il.Target, il.BeginOn, il.ExpireOn, il.Enabled, il.StyleConfig, il.IsAny, il.Version, il.CreatedAt, il.UpdatedAt)
	if err != nil {
		return err
	}

	// set existence
	il._exists = true

	return nil
}

// Update updates the InvitationLook in the database.
func (il *InvitationLook) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !il._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if il._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE custmchat.invitation_looks SET ` +
		`ent_id = ?, name = ?, target = ?, begin_on = ?, expire_on = ?, enabled = ?, style_config = ?, is_any = ?, version = ?, created_at = ?, updated_at = ?` +
		` WHERE rule_id = ?`

	// run query
	XOLog(sqlstr, il.EntID, il.Name, il.Target, il.BeginOn, il.ExpireOn, il.Enabled, il.StyleConfig, il.IsAny, il.Version, il.CreatedAt, il.UpdatedAt, il.RuleID)
	_, err = db.Exec(sqlstr, il.EntID, il.Name, il.Target, il.BeginOn, il.ExpireOn, il.Enabled, il.StyleConfig, il.IsAny, il.Version, il.CreatedAt, il.UpdatedAt, il.RuleID)
	return err
}

// Save saves the InvitationLook to the database.
func (il *InvitationLook) Save(db XODB) error {
	if il.Exists() {
		return il.Update(db)
	}

	return il.Insert(db)
}

// Delete deletes the InvitationLook from the database.
func (il *InvitationLook) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !il._exists {
		return nil
	}

	// if deleted, bail
	if il._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM custmchat.invitation_looks WHERE rule_id = ?`

	// run query
	XOLog(sqlstr, il.RuleID)
	_, err = db.Exec(sqlstr, il.RuleID)
	if err != nil {
		return err
	}

	// set deleted
	il._deleted = true

	return nil
}

// InvitationLooksByEntID retrieves a row from 'custmchat.invitation_looks' as a InvitationLook.
//
// Generated from index 'idx_enterprise_id'.
func InvitationLooksByEntID(db XODB, entID string) ([]*InvitationLook, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`rule_id, ent_id, name, target, begin_on, expire_on, enabled, style_config, is_any, version, created_at, updated_at ` +
		`FROM custmchat.invitation_looks ` +
		`WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, entID)
	q, err := db.Query(sqlstr, entID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*InvitationLook{}
	for q.Next() {
		il := InvitationLook{
			_exists: true,
		}

		// scan
		err = q.Scan(&il.RuleID, &il.EntID, &il.Name, &il.Target, &il.BeginOn, &il.ExpireOn, &il.Enabled, &il.StyleConfig, &il.IsAny, &il.Version, &il.CreatedAt, &il.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &il)
	}

	return res, nil
}

// InvitationLookByRuleID retrieves a row from 'custmchat.invitation_looks' as a InvitationLook.
//
// Generated from index 'invitation_looks_rule_id_pkey'.
func InvitationLookByRuleID(db XODB, ruleID string) (*InvitationLook, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`rule_id, ent_id, name, target, begin_on, expire_on, enabled, style_config, is_any, version, created_at, updated_at ` +
		`FROM custmchat.invitation_looks ` +
		`WHERE rule_id = ?`

	// run query
	XOLog(sqlstr, ruleID)
	il := InvitationLook{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, ruleID).Scan(&il.RuleID, &il.EntID, &il.Name, &il.Target, &il.BeginOn, &il.ExpireOn, &il.Enabled, &il.StyleConfig, &il.IsAny, &il.Version, &il.CreatedAt, &il.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &il, nil
}
