// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// QueueConfig represents a row from 'custmchat.queue_config'.
type QueueConfig struct {
	EntID       string `json:"ent_id"`      // ent_id
	QueueSize   int    `json:"queue_size"`  // queue_size
	Description string `json:"description"` // description
	Status      bool   `json:"status"`      // status

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the QueueConfig exists in the database.
func (qc *QueueConfig) Exists() bool {
	return qc._exists
}

// Deleted provides information if the QueueConfig has been deleted from the database.
func (qc *QueueConfig) Deleted() bool {
	return qc._deleted
}

// Insert inserts the QueueConfig to the database.
func (qc *QueueConfig) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if qc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.queue_config (` +
		`ent_id, queue_size, description, status` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, qc.EntID, qc.QueueSize, qc.Description, qc.Status)
	_, err = db.Exec(sqlstr, qc.EntID, qc.QueueSize, qc.Description, qc.Status)
	if err != nil {
		return err
	}

	// set existence
	qc._exists = true

	return nil
}

// Update updates the QueueConfig in the database.
func (qc *QueueConfig) Update(db XODB) error {
	var err error

	// sql query
	const sqlstr = `UPDATE custmchat.queue_config SET ` +
		`queue_size = ?, description = ?, status = ?` +
		` WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, qc.QueueSize, qc.Description, qc.Status, qc.EntID)
	_, err = db.Exec(sqlstr, qc.QueueSize, qc.Description, qc.Status, qc.EntID)
	return err
}

// Save saves the QueueConfig to the database.
func (qc *QueueConfig) Save(db XODB) error {
	if qc.Exists() {
		return qc.Update(db)
	}

	return qc.Insert(db)
}

// Delete deletes the QueueConfig from the database.
func (qc *QueueConfig) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !qc._exists {
		return nil
	}

	// if deleted, bail
	if qc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM custmchat.queue_config WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, qc.EntID)
	_, err = db.Exec(sqlstr, qc.EntID)
	if err != nil {
		return err
	}

	// set deleted
	qc._deleted = true

	return nil
}

// QueueConfigByEntID retrieves a row from 'custmchat.queue_config' as a QueueConfig.
//
// Generated from index 'ent_id'.
func QueueConfigByEntID(db XODB, entID string) (*QueueConfig, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ent_id, queue_size, description, status ` +
		`FROM custmchat.queue_config ` +
		`WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, entID)
	qc := QueueConfig{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, entID).Scan(&qc.EntID, &qc.QueueSize, &qc.Description, &qc.Status)
	if err != nil {
		return nil, err
	}

	return &qc, nil
}
