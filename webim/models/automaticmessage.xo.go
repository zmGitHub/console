// Package new_models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"time"
)

var (
	AutoMessageWebChannelType = "web"

	AutoMessagePromotionMsgType       = "promotion"
	AutoMessageWelcomeMsgType         = "welcome"
	AutoMessageAgentNoResponseMsgType = "agent_no_response"
	AutoMessageClientNoActionMsgType  = "client_no_action"

	AutoMessageChannelTypeMap = map[string]bool{
		AutoMessageWebChannelType: true,
	}

	AutoMessageMsgTypeMap = map[string]bool{
		AutoMessagePromotionMsgType:       true,
		AutoMessageWelcomeMsgType:         true,
		AutoMessageAgentNoResponseMsgType: true,
		AutoMessageClientNoActionMsgType:  true,
	}
)

// AutomaticMessage represents a row from 'custmchat.automatic_message'.
type AutomaticMessage struct {
	ID           string    `json:"id"`            // id
	EntID        string    `json:"ent_id"`        // ent_id
	ChannelType  string    `json:"channel_type"`  // channel_type
	MsgType      string    `json:"msg_type"`      // msg_type
	MsgContent   string    `json:"msg_content"`   // msg_content
	AfterSeconds int       `json:"after_seconds"` // after_seconds
	Enabled      bool      `json:"enabled"`       // enabled
	CreatedAt    time.Time `json:"created_at"`    // created_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AutomaticMessage exists in the database.
func (am *AutomaticMessage) Exists() bool {
	return am._exists
}

// Deleted provides information if the AutomaticMessage has been deleted from the database.
func (am *AutomaticMessage) Deleted() bool {
	return am._deleted
}

// Insert inserts the AutomaticMessage to the database.
func (am *AutomaticMessage) Insert(db XODB) error {
	var err error

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.automatic_message (` +
		`id, ent_id, channel_type, msg_type, msg_content, after_seconds, enabled, created_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, am.ID, am.EntID, am.ChannelType, am.MsgType, am.MsgContent, am.AfterSeconds, am.Enabled, am.CreatedAt)
	_, err = db.Exec(sqlstr, am.ID, am.EntID, am.ChannelType, am.MsgType, am.MsgContent, am.AfterSeconds, am.Enabled, am.CreatedAt)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the AutomaticMessage in the database.
func (am *AutomaticMessage) Update(db XODB) error {
	var err error

	// sql query
	const sqlstr = `UPDATE custmchat.automatic_message SET ` +
		`ent_id = ?, channel_type = ?, msg_type = ?, msg_content = ?, after_seconds = ?, enabled = ?, created_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, am.EntID, am.ChannelType, am.MsgType, am.MsgContent, am.AfterSeconds, am.Enabled, am.CreatedAt, am.ID)
	_, err = db.Exec(sqlstr, am.EntID, am.ChannelType, am.MsgType, am.MsgContent, am.AfterSeconds, am.Enabled, am.CreatedAt, am.ID)
	return err
}

// Save saves the AutomaticMessage to the database.
func (am *AutomaticMessage) Save(db XODB) error {
	if am.Exists() {
		return am.Update(db)
	}

	return am.Insert(db)
}

// Delete deletes the AutomaticMessage from the database.
func (am *AutomaticMessage) Delete(db XODB) error {
	var err error

	// sql query
	const sqlstr = `DELETE FROM custmchat.automatic_message WHERE id = ?`

	// run query
	XOLog(sqlstr, am.ID)
	_, err = db.Exec(sqlstr, am.ID)
	if err != nil {
		return err
	}

	return nil
}

// AutomaticMessageByID retrieves a row from 'custmchat.automatic_message' as a AutomaticMessage.
//
// Generated from index 'automatic_message_id_pkey'.
func AutomaticMessageByID(db XODB, id string) (*AutomaticMessage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, channel_type, msg_type, msg_content, after_seconds, enabled, created_at ` +
		`FROM custmchat.automatic_message ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	am := AutomaticMessage{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&am.ID, &am.EntID, &am.ChannelType, &am.MsgType, &am.MsgContent, &am.AfterSeconds, &am.Enabled, &am.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &am, nil
}

// AutomaticMessagesByEntID retrieves a row from 'custmchat.automatic_message' as a AutomaticMessage.
//
// Generated from index 'idx_ent'.
func AutomaticMessagesByEntID(db XODB, entID string) ([]*AutomaticMessage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, channel_type, msg_type, msg_content, after_seconds, enabled, created_at ` +
		`FROM custmchat.automatic_message ` +
		`WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, entID)
	q, err := db.Query(sqlstr, entID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*AutomaticMessage
	for q.Next() {
		am := AutomaticMessage{}

		// scan
		err = q.Scan(&am.ID, &am.EntID, &am.ChannelType, &am.MsgType, &am.MsgContent, &am.AfterSeconds, &am.Enabled, &am.CreatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &am)
	}
	if err = q.Err(); err != nil {
		return nil, err
	}

	return res, nil
}
