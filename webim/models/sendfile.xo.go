// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// SendFile represents a row from 'custmchat.send_file'.
type SendFile struct {
	EntID  string `json:"ent_id"` // ent_id
	Status bool   `json:"status"` // status

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the SendFile exists in the database.
func (sf *SendFile) Exists() bool {
	return sf._exists
}

// Deleted provides information if the SendFile has been deleted from the database.
func (sf *SendFile) Deleted() bool {
	return sf._deleted
}

// Insert inserts the SendFile to the database.
func (sf *SendFile) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if sf._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.send_file (` +
		`ent_id, status` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, sf.EntID, sf.Status)
	_, err = db.Exec(sqlstr, sf.EntID, sf.Status)
	if err != nil {
		return err
	}

	// set existence
	sf._exists = true

	return nil
}

// Update updates the SendFile in the database.
func (sf *SendFile) Update(db XODB) error {
	var err error

	// sql query
	const sqlstr = `UPDATE custmchat.send_file SET ` +
		`status = ?` +
		` WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, sf.Status, sf.EntID)
	_, err = db.Exec(sqlstr, sf.Status, sf.EntID)
	return err
}

// Save saves the SendFile to the database.
func (sf *SendFile) Save(db XODB) error {
	if sf.Exists() {
		return sf.Update(db)
	}

	return sf.Insert(db)
}

// Delete deletes the SendFile from the database.
func (sf *SendFile) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !sf._exists {
		return nil
	}

	// if deleted, bail
	if sf._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM custmchat.send_file WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, sf.EntID)
	_, err = db.Exec(sqlstr, sf.EntID)
	if err != nil {
		return err
	}

	// set deleted
	sf._deleted = true

	return nil
}

// SendFileByEntID retrieves a row from 'custmchat.send_file' as a SendFile.
//
// Generated from index 'ent_id'.
func SendFileByEntID(db XODB, entID string) (*SendFile, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ent_id, status ` +
		`FROM custmchat.send_file ` +
		`WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, entID)
	sf := SendFile{}

	err = db.QueryRow(sqlstr, entID).Scan(&sf.EntID, &sf.Status)
	if err != nil {
		if err == sql.ErrNoRows {
			return &SendFile{EntID: entID, Status: false}, nil
		}

		return nil, err
	}

	return &sf, nil
}
