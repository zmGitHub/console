// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// EntApp represents a row from 'custmchat.ent_app'.
type EntApp struct {
	ID       string    `json:"id"`        // id
	EntID    string    `json:"ent_id"`    // ent_id
	AppName  string    `json:"app_name"`  // app_name
	CreateAt time.Time `json:"create_at"` // create_at
	UpdateAt time.Time `json:"update_at"` // update_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the EntApp exists in the database.
func (ea *EntApp) Exists() bool {
	return ea._exists
}

// Deleted provides information if the EntApp has been deleted from the database.
func (ea *EntApp) Deleted() bool {
	return ea._deleted
}

// Insert inserts the EntApp to the database.
func (ea *EntApp) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ea._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.ent_app (` +
		`id, ent_id, app_name, create_at, update_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ea.ID, ea.EntID, ea.AppName, ea.CreateAt, ea.UpdateAt)
	_, err = db.Exec(sqlstr, ea.ID, ea.EntID, ea.AppName, ea.CreateAt, ea.UpdateAt)
	if err != nil {
		return err
	}

	// set existence
	ea._exists = true

	return nil
}

// Update updates the EntApp in the database.
func (ea *EntApp) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ea._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ea._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE custmchat.ent_app SET ` +
		`ent_id = ?, app_name = ?, create_at = ?, update_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ea.EntID, ea.AppName, ea.CreateAt, ea.UpdateAt, ea.ID)
	_, err = db.Exec(sqlstr, ea.EntID, ea.AppName, ea.CreateAt, ea.UpdateAt, ea.ID)
	return err
}

// Save saves the EntApp to the database.
func (ea *EntApp) Save(db XODB) error {
	if ea.Exists() {
		return ea.Update(db)
	}

	return ea.Insert(db)
}

// Delete deletes the EntApp from the database.
func (ea *EntApp) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ea._exists {
		return nil
	}

	// if deleted, bail
	if ea._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM custmchat.ent_app WHERE id = ?`

	// run query
	XOLog(sqlstr, ea.ID)
	_, err = db.Exec(sqlstr, ea.ID)
	if err != nil {
		return err
	}

	// set deleted
	ea._deleted = true

	return nil
}

// EntAppByID retrieves a row from 'custmchat.ent_app' as a EntApp.
//
// Generated from index 'ent_app_id_pkey'.
func EntAppByID(db XODB, id string) (*EntApp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, app_name, create_at, update_at ` +
		`FROM custmchat.ent_app ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ea := EntApp{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ea.ID, &ea.EntID, &ea.AppName, &ea.CreateAt, &ea.UpdateAt)
	if err != nil {
		return nil, err
	}

	return &ea, nil
}

// EntAppByEntIDAppName retrieves a row from 'custmchat.ent_app' as a EntApp.
//
// Generated from index 'ent_id'.
func EntAppByEntIDAppName(db XODB, entID string, appName string) (*EntApp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, app_name, create_at, update_at ` +
		`FROM custmchat.ent_app ` +
		`WHERE ent_id = ? AND app_name = ?`

	// run query
	XOLog(sqlstr, entID, appName)
	ea := EntApp{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, entID, appName).Scan(&ea.ID, &ea.EntID, &ea.AppName, &ea.CreateAt, &ea.UpdateAt)
	if err != nil {
		return nil, err
	}

	return &ea, nil
}
