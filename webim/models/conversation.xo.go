// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// Conversation represents a row from 'custmchat.conversation'.
type Conversation struct {
	ID                     string         `json:"id"`                        // id
	EntID                  string         `json:"ent_id"`                    // ent_id
	TraceID                string         `json:"trace_id"`                  // trace_id
	AgentID                string         `json:"agent_id"`                  // agent_id
	AgentMsgCount          uint           `json:"agent_msg_count"`           // agent_msg_count
	AgentType              sql.NullString `json:"agent_type"`                // agent_type
	MsgCount               uint           `json:"msg_count"`                 // msg_count
	Title                  string         `json:"title"`                     // title
	ClientFirstSendTime    mysql.NullTime `json:"client_first_send_time"`    // client_first_send_time
	ClientMsgCount         uint           `json:"client_msg_count"`          // client_msg_count
	Duration               uint           `json:"duration"`                  // duration
	FirstMsgCreatedAt      mysql.NullTime `json:"first_msg_created_at"`      // first_msg_created_at
	FirstResponseWaitTime  sql.NullInt64  `json:"first_response_wait_time"`  // first_response_wait_time
	LastMsgContent         sql.NullString `json:"last_msg_content"`          // last_msg_content
	LastMsgCreatedAt       mysql.NullTime `json:"last_msg_created_at"`       // last_msg_created_at
	QualityGrade           sql.NullString `json:"quality_grade"`             // quality_grade
	Summary                string         `json:"summary"`                   // summary
	CreatedAt              time.Time      `json:"created_at"`                // created_at
	UpdateAt               time.Time      `json:"update_at"`                 // update_at
	EndedAt                mysql.NullTime `json:"ended_at"`                  // ended_at
	EndedBy                sql.NullString `json:"ended_by"`                  // ended_by
	AgentEffectiveMsgCount int            `json:"agent_effective_msg_count"` // agent_effective_msg_count
	ClientLastSendTime     mysql.NullTime `json:"client_last_send_time"`     // client_last_send_time
	FirstMsgCreateTime     mysql.NullTime `json:"first_msg_create_time"`     // first_msg_create_time
	EvalContent            string         `json:"eval_content"`              // eval_content
	EvalLevel              int            `json:"eval_level"`                // eval_level
	HasSummary             bool           `json:"has_summary"`               // has_summary

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Conversation exists in the database.
func (c *Conversation) Exists() bool {
	return c._exists
}

// Deleted provides information if the Conversation has been deleted from the database.
func (c *Conversation) Deleted() bool {
	return c._deleted
}

// Insert inserts the Conversation to the database.
func (c *Conversation) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.conversation (` +
		`id, ent_id, trace_id, agent_id, agent_msg_count, agent_type, msg_count, title, client_first_send_time, client_msg_count, duration, first_msg_created_at, first_response_wait_time, last_msg_content, last_msg_created_at, quality_grade, summary, created_at, update_at, ended_at, ended_by, agent_effective_msg_count, client_last_send_time, first_msg_create_time, eval_content, eval_level, has_summary` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, c.ID, c.EntID, c.TraceID, c.AgentID, c.AgentMsgCount, c.AgentType, c.MsgCount, c.Title, c.ClientFirstSendTime, c.ClientMsgCount, c.Duration, c.FirstMsgCreatedAt, c.FirstResponseWaitTime, c.LastMsgContent, c.LastMsgCreatedAt, c.QualityGrade, c.Summary, c.CreatedAt, c.UpdateAt, c.EndedAt, c.EndedBy, c.AgentEffectiveMsgCount, c.ClientLastSendTime, c.FirstMsgCreateTime, c.EvalContent, c.EvalLevel, c.HasSummary)
	_, err = db.Exec(sqlstr, c.ID, c.EntID, c.TraceID, c.AgentID, c.AgentMsgCount, c.AgentType, c.MsgCount, c.Title, c.ClientFirstSendTime, c.ClientMsgCount, c.Duration, c.FirstMsgCreatedAt, c.FirstResponseWaitTime, c.LastMsgContent, c.LastMsgCreatedAt, c.QualityGrade, c.Summary, c.CreatedAt, c.UpdateAt, c.EndedAt, c.EndedBy, c.AgentEffectiveMsgCount, c.ClientLastSendTime, c.FirstMsgCreateTime, c.EvalContent, c.EvalLevel, c.HasSummary)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Conversation in the database.
func (c *Conversation) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE custmchat.conversation SET ` +
		`ent_id = ?, trace_id = ?, agent_id = ?, agent_msg_count = ?, agent_type = ?, msg_count = ?, title = ?, client_first_send_time = ?, client_msg_count = ?, duration = ?, first_msg_created_at = ?, first_response_wait_time = ?, last_msg_content = ?, last_msg_created_at = ?, quality_grade = ?, summary = ?, created_at = ?, update_at = ?, ended_at = ?, ended_by = ?, agent_effective_msg_count = ?, client_last_send_time = ?, first_msg_create_time = ?, eval_content = ?, eval_level = ?, has_summary = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, c.EntID, c.TraceID, c.AgentID, c.AgentMsgCount, c.AgentType, c.MsgCount, c.Title, c.ClientFirstSendTime, c.ClientMsgCount, c.Duration, c.FirstMsgCreatedAt, c.FirstResponseWaitTime, c.LastMsgContent, c.LastMsgCreatedAt, c.QualityGrade, c.Summary, c.CreatedAt, c.UpdateAt, c.EndedAt, c.EndedBy, c.AgentEffectiveMsgCount, c.ClientLastSendTime, c.FirstMsgCreateTime, c.EvalContent, c.EvalLevel, c.HasSummary, c.ID)
	_, err = db.Exec(sqlstr, c.EntID, c.TraceID, c.AgentID, c.AgentMsgCount, c.AgentType, c.MsgCount, c.Title, c.ClientFirstSendTime, c.ClientMsgCount, c.Duration, c.FirstMsgCreatedAt, c.FirstResponseWaitTime, c.LastMsgContent, c.LastMsgCreatedAt, c.QualityGrade, c.Summary, c.CreatedAt, c.UpdateAt, c.EndedAt, c.EndedBy, c.AgentEffectiveMsgCount, c.ClientLastSendTime, c.FirstMsgCreateTime, c.EvalContent, c.EvalLevel, c.HasSummary, c.ID)
	return err
}

// Save saves the Conversation to the database.
func (c *Conversation) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Delete deletes the Conversation from the database.
func (c *Conversation) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM custmchat.conversation WHERE id = ?`

	// run query
	XOLog(sqlstr, c.ID)
	_, err = db.Exec(sqlstr, c.ID)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// ConversationByID retrieves a row from 'custmchat.conversation' as a Conversation.
//
// Generated from index 'conversation_id_pkey'.
func ConversationByID(db XODB, id string) (*Conversation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, trace_id, agent_id, agent_msg_count, agent_type, msg_count, title, client_first_send_time, client_msg_count, duration, first_msg_created_at, first_response_wait_time, last_msg_content, last_msg_created_at, quality_grade, summary, created_at, update_at, ended_at, ended_by, agent_effective_msg_count, client_last_send_time, first_msg_create_time, eval_content, eval_level, has_summary ` +
		`FROM custmchat.conversation ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	c := Conversation{}

	err = db.QueryRow(sqlstr, id).Scan(&c.ID, &c.EntID, &c.TraceID, &c.AgentID, &c.AgentMsgCount, &c.AgentType, &c.MsgCount, &c.Title, &c.ClientFirstSendTime, &c.ClientMsgCount, &c.Duration, &c.FirstMsgCreatedAt, &c.FirstResponseWaitTime, &c.LastMsgContent, &c.LastMsgCreatedAt, &c.QualityGrade, &c.Summary, &c.CreatedAt, &c.UpdateAt, &c.EndedAt, &c.EndedBy, &c.AgentEffectiveMsgCount, &c.ClientLastSendTime, &c.FirstMsgCreateTime, &c.EvalContent, &c.EvalLevel, &c.HasSummary)
	if err != nil {
		return nil, err
	}

	return &c, nil
}

// ConversationsByAgentID retrieves a row from 'custmchat.conversation' as a Conversation.
//
// Generated from index 'idx_agent'.
func ConversationsByAgentID(db XODB, agentID string) ([]*Conversation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, trace_id, agent_id, agent_msg_count, agent_type, msg_count, title, client_first_send_time, client_msg_count, duration, first_msg_created_at, first_response_wait_time, last_msg_content, last_msg_created_at, quality_grade, summary, created_at, update_at, ended_at, ended_by, agent_effective_msg_count, client_last_send_time, first_msg_create_time, eval_content, eval_level, has_summary ` +
		`FROM custmchat.conversation ` +
		`WHERE agent_id = ?`

	// run query
	XOLog(sqlstr, agentID)
	q, err := db.Query(sqlstr, agentID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Conversation{}
	for q.Next() {
		c := Conversation{
			_exists: true,
		}

		// scan
		err = q.Scan(&c.ID, &c.EntID, &c.TraceID, &c.AgentID, &c.AgentMsgCount, &c.AgentType, &c.MsgCount, &c.Title, &c.ClientFirstSendTime, &c.ClientMsgCount, &c.Duration, &c.FirstMsgCreatedAt, &c.FirstResponseWaitTime, &c.LastMsgContent, &c.LastMsgCreatedAt, &c.QualityGrade, &c.Summary, &c.CreatedAt, &c.UpdateAt, &c.EndedAt, &c.EndedBy, &c.AgentEffectiveMsgCount, &c.ClientLastSendTime, &c.FirstMsgCreateTime, &c.EvalContent, &c.EvalLevel, &c.HasSummary)
		if err != nil {
			return nil, err
		}

		res = append(res, &c)
	}

	return res, nil
}

// ConversationsByEntID retrieves a row from 'custmchat.conversation' as a Conversation.
//
// Generated from index 'idx_ent'.
func ConversationsByEntID(db XODB, entID string) ([]*Conversation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, trace_id, agent_id, agent_msg_count, agent_type, msg_count, title, client_first_send_time, client_msg_count, duration, first_msg_created_at, first_response_wait_time, last_msg_content, last_msg_created_at, quality_grade, summary, created_at, update_at, ended_at, ended_by, agent_effective_msg_count, client_last_send_time, first_msg_create_time, eval_content, eval_level, has_summary ` +
		`FROM custmchat.conversation ` +
		`WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, entID)
	q, err := db.Query(sqlstr, entID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Conversation{}
	for q.Next() {
		c := Conversation{
			_exists: true,
		}

		// scan
		err = q.Scan(&c.ID, &c.EntID, &c.TraceID, &c.AgentID, &c.AgentMsgCount, &c.AgentType, &c.MsgCount, &c.Title, &c.ClientFirstSendTime, &c.ClientMsgCount, &c.Duration, &c.FirstMsgCreatedAt, &c.FirstResponseWaitTime, &c.LastMsgContent, &c.LastMsgCreatedAt, &c.QualityGrade, &c.Summary, &c.CreatedAt, &c.UpdateAt, &c.EndedAt, &c.EndedBy, &c.AgentEffectiveMsgCount, &c.ClientLastSendTime, &c.FirstMsgCreateTime, &c.EvalContent, &c.EvalLevel, &c.HasSummary)
		if err != nil {
			return nil, err
		}

		res = append(res, &c)
	}

	return res, nil
}
