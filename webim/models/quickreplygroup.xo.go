// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"time"
)

// QuickreplyGroup represents a row from 'custmchat.quickreply_group'.
type QuickreplyGroup struct {
	ID          string    `json:"id"`           // id
	EntID       string    `json:"ent_id"`       // ent_id
	Title       string    `json:"title"`        // title
	Rank        int       `json:"rank"`         // rank
	CreatedBy   string    `json:"created_by"`   // created_by
	CreatorType string    `json:"creator_type"` // creator_type
	Position    int       `json:"position"`     // position
	CreatedAt   time.Time `json:"created_at"`   // created_at
	UpdatedAt   time.Time `json:"updated_at"`   // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the QuickreplyGroup exists in the database.
func (qg *QuickreplyGroup) Exists() bool {
	return qg._exists
}

// Deleted provides information if the QuickreplyGroup has been deleted from the database.
func (qg *QuickreplyGroup) Deleted() bool {
	return qg._deleted
}

// Insert inserts the QuickreplyGroup to the database.
func (qg *QuickreplyGroup) Insert(db XODB) error {
	var err error

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.quickreply_group (` +
		`id, ent_id, title, rank, created_by, creator_type, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, qg.ID, qg.EntID, qg.Title, qg.Rank, qg.CreatedBy, qg.CreatorType, qg.CreatedAt, qg.UpdatedAt)
	_, err = db.Exec(sqlstr, qg.ID, qg.EntID, qg.Title, qg.Rank, qg.CreatedBy, qg.CreatorType, qg.CreatedAt, qg.UpdatedAt)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the QuickreplyGroup in the database.
func (qg *QuickreplyGroup) Update(db XODB) error {
	var err error

	// sql query
	const sqlstr = `UPDATE custmchat.quickreply_group SET ` +
		`ent_id = ?, title = ?, rank = ?, created_by = ?, creator_type = ?, created_at = ?, updated_at = ?, position=? ` +
		` WHERE id = ?`

	_, err = db.Exec(sqlstr, qg.EntID, qg.Title, qg.Rank, qg.CreatedBy, qg.CreatorType, qg.CreatedAt, qg.UpdatedAt, qg.Position, qg.ID)
	return err
}

// Save saves the QuickreplyGroup to the database.
func (qg *QuickreplyGroup) Save(db XODB) error {
	if qg.Exists() {
		return qg.Update(db)
	}

	return qg.Insert(db)
}

// Delete deletes the QuickreplyGroup from the database.
func (qg *QuickreplyGroup) Delete(db XODB) error {
	var err error

	// sql query
	const sqlstr = `DELETE FROM custmchat.quickreply_group WHERE id = ?`

	// run query
	XOLog(sqlstr, qg.ID)
	_, err = db.Exec(sqlstr, qg.ID)
	if err != nil {
		return err
	}

	return nil
}

// QuickreplyGroupByID retrieves a row from 'custmchat.quickreply_group' as a QuickreplyGroup.
//
// Generated from index 'quickreply_group_id_pkey'.
func QuickreplyGroupByID(db XODB, id string) (*QuickreplyGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, title, rank, created_by, creator_type, created_at, updated_at ` +
		`FROM custmchat.quickreply_group ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	qg := QuickreplyGroup{}

	err = db.QueryRow(sqlstr, id).Scan(&qg.ID, &qg.EntID, &qg.Title, &qg.Rank, &qg.CreatedBy, &qg.CreatorType, &qg.CreatedAt, &qg.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &qg, nil
}
