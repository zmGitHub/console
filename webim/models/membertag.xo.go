// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// MemberTag represents a row from 'custmchat.member_tag'.
type MemberTag struct {
	ID       string    `json:"id"`        // id
	UID      string    `json:"uid"`       // uid
	EntID    string    `json:"ent_id"`    // ent_id
	TagID    string    `json:"tag_id"`    // tag_id
	CreateAt time.Time `json:"create_at"` // create_at
	UpdateAt time.Time `json:"update_at"` // update_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MemberTag exists in the database.
func (mt *MemberTag) Exists() bool {
	return mt._exists
}

// Deleted provides information if the MemberTag has been deleted from the database.
func (mt *MemberTag) Deleted() bool {
	return mt._deleted
}

// Insert inserts the MemberTag to the database.
func (mt *MemberTag) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if mt._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.member_tag (` +
		`id, uid, ent_id, tag_id, create_at, update_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, mt.ID, mt.UID, mt.EntID, mt.TagID, mt.CreateAt, mt.UpdateAt)
	_, err = db.Exec(sqlstr, mt.ID, mt.UID, mt.EntID, mt.TagID, mt.CreateAt, mt.UpdateAt)
	if err != nil {
		return err
	}

	// set existence
	mt._exists = true

	return nil
}

// Update updates the MemberTag in the database.
func (mt *MemberTag) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mt._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if mt._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE custmchat.member_tag SET ` +
		`uid = ?, ent_id = ?, tag_id = ?, create_at = ?, update_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, mt.UID, mt.EntID, mt.TagID, mt.CreateAt, mt.UpdateAt, mt.ID)
	_, err = db.Exec(sqlstr, mt.UID, mt.EntID, mt.TagID, mt.CreateAt, mt.UpdateAt, mt.ID)
	return err
}

// Save saves the MemberTag to the database.
func (mt *MemberTag) Save(db XODB) error {
	if mt.Exists() {
		return mt.Update(db)
	}

	return mt.Insert(db)
}

// Delete deletes the MemberTag from the database.
func (mt *MemberTag) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mt._exists {
		return nil
	}

	// if deleted, bail
	if mt._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM custmchat.member_tag WHERE id = ?`

	// run query
	XOLog(sqlstr, mt.ID)
	_, err = db.Exec(sqlstr, mt.ID)
	if err != nil {
		return err
	}

	// set deleted
	mt._deleted = true

	return nil
}

// MemberTagByID retrieves a row from 'custmchat.member_tag' as a MemberTag.
//
// Generated from index 'member_tag_id_pkey'.
func MemberTagByID(db XODB, id string) (*MemberTag, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, uid, ent_id, tag_id, create_at, update_at ` +
		`FROM custmchat.member_tag ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	mt := MemberTag{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&mt.ID, &mt.UID, &mt.EntID, &mt.TagID, &mt.CreateAt, &mt.UpdateAt)
	if err != nil {
		return nil, err
	}

	return &mt, nil
}

// MemberTagsByTagID retrieves a row from 'custmchat.member_tag' as a MemberTag.
//
// Generated from index 'tag_id'.
func MemberTagsByTagID(db XODB, tagID string) ([]*MemberTag, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, uid, ent_id, tag_id, create_at, update_at ` +
		`FROM custmchat.member_tag ` +
		`WHERE tag_id = ?`

	// run query
	XOLog(sqlstr, tagID)
	q, err := db.Query(sqlstr, tagID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*MemberTag{}
	for q.Next() {
		mt := MemberTag{
			_exists: true,
		}

		// scan
		err = q.Scan(&mt.ID, &mt.UID, &mt.EntID, &mt.TagID, &mt.CreateAt, &mt.UpdateAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &mt)
	}

	return res, nil
}

// MemberTagByUIDEntIDTagID retrieves a row from 'custmchat.member_tag' as a MemberTag.
//
// Generated from index 'uid'.
func MemberTagByUIDEntIDTagID(db XODB, uid string, entID string, tagID string) (*MemberTag, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, uid, ent_id, tag_id, create_at, update_at ` +
		`FROM custmchat.member_tag ` +
		`WHERE uid = ? AND ent_id = ? AND tag_id = ?`

	// run query
	XOLog(sqlstr, uid, entID, tagID)
	mt := MemberTag{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, uid, entID, tagID).Scan(&mt.ID, &mt.UID, &mt.EntID, &mt.TagID, &mt.CreateAt, &mt.UpdateAt)
	if err != nil {
		return nil, err
	}

	return &mt, nil
}
