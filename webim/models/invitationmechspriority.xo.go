// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// InvitationMechsPriority represents a row from 'custmchat.invitation_mechs_priority'.
type InvitationMechsPriority struct {
	EntID     string    `json:"ent_id"`     // ent_id
	Priority  string    `json:"priority"`   // priority
	CreatedAt time.Time `json:"created_at"` // created_at
	UpdatedAt time.Time `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the InvitationMechsPriority exists in the database.
func (imp *InvitationMechsPriority) Exists() bool {
	return imp._exists
}

// Deleted provides information if the InvitationMechsPriority has been deleted from the database.
func (imp *InvitationMechsPriority) Deleted() bool {
	return imp._deleted
}

// Insert inserts the InvitationMechsPriority to the database.
func (imp *InvitationMechsPriority) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if imp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.invitation_mechs_priority (` +
		`ent_id, priority, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, imp.EntID, imp.Priority, imp.CreatedAt, imp.UpdatedAt)
	_, err = db.Exec(sqlstr, imp.EntID, imp.Priority, imp.CreatedAt, imp.UpdatedAt)
	if err != nil {
		return err
	}

	// set existence
	imp._exists = true

	return nil
}

// Update updates the InvitationMechsPriority in the database.
func (imp *InvitationMechsPriority) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !imp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if imp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE custmchat.invitation_mechs_priority SET ` +
		`priority = ?, created_at = ?, updated_at = ?` +
		` WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, imp.Priority, imp.CreatedAt, imp.UpdatedAt, imp.EntID)
	_, err = db.Exec(sqlstr, imp.Priority, imp.CreatedAt, imp.UpdatedAt, imp.EntID)
	return err
}

// Save saves the InvitationMechsPriority to the database.
func (imp *InvitationMechsPriority) Save(db XODB) error {
	if imp.Exists() {
		return imp.Update(db)
	}

	return imp.Insert(db)
}

// Delete deletes the InvitationMechsPriority from the database.
func (imp *InvitationMechsPriority) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !imp._exists {
		return nil
	}

	// if deleted, bail
	if imp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM custmchat.invitation_mechs_priority WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, imp.EntID)
	_, err = db.Exec(sqlstr, imp.EntID)
	if err != nil {
		return err
	}

	// set deleted
	imp._deleted = true

	return nil
}

// InvitationMechsPriorityByEntID retrieves a row from 'custmchat.invitation_mechs_priority' as a InvitationMechsPriority.
//
// Generated from index 'invitation_mechs_priority_ent_id_pkey'.
func InvitationMechsPriorityByEntID(db XODB, entID string) (*InvitationMechsPriority, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ent_id, priority, created_at, updated_at ` +
		`FROM custmchat.invitation_mechs_priority ` +
		`WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, entID)
	imp := InvitationMechsPriority{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, entID).Scan(&imp.EntID, &imp.Priority, &imp.CreatedAt, &imp.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &imp, nil
}
