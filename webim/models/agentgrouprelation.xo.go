// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// AgentGroupRelation represents a row from 'custmchat.agent_group_relation'.
type AgentGroupRelation struct {
	GroupID string `json:"group_id"` // group_id
	UID     string `json:"uid"`      // uid

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AgentGroupRelation exists in the database.
func (agr *AgentGroupRelation) Exists() bool {
	return agr._exists
}

// Deleted provides information if the AgentGroupRelation has been deleted from the database.
func (agr *AgentGroupRelation) Deleted() bool {
	return agr._deleted
}

// Insert inserts the AgentGroupRelation to the database.
func (agr *AgentGroupRelation) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if agr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.agent_group_relation (` +
		`group_id, uid` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, agr.GroupID, agr.UID)
	_, err = db.Exec(sqlstr, agr.GroupID, agr.UID)
	if err != nil {
		return err
	}

	// set existence
	agr._exists = true

	return nil
}

// Update statements omitted due to lack of fields other than primary key

// Delete deletes the AgentGroupRelation from the database.
func (agr *AgentGroupRelation) DeleteByGroupID(db XODB) error {
	var err error

	sqlstr := `DELETE FROM custmchat.agent_group_relation WHERE group_id = ?`
	_, err = db.Exec(sqlstr, agr.GroupID)
	if err != nil {
		return err
	}

	return nil
}

// AgentGroupRelationByUID retrieves a row from 'custmchat.agent_group_relation' as a AgentGroupRelation.
//
// Generated from index 'agent_group_relation_uid_pkey'.
func AgentGroupRelationByUID(db XODB, uid string) (*AgentGroupRelation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`group_id, uid ` +
		`FROM custmchat.agent_group_relation ` +
		`WHERE uid = ?`

	// run query
	XOLog(sqlstr, uid)
	agr := AgentGroupRelation{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, uid).Scan(&agr.GroupID, &agr.UID)
	if err != nil {
		return nil, err
	}

	return &agr, nil
}

// AgentGroupRelationByUIDGroupID retrieves a row from 'custmchat.agent_group_relation' as a AgentGroupRelation.
//
// Generated from index 'uid'.
func AgentGroupRelationByUIDGroupID(db XODB, uid string, groupID string) (*AgentGroupRelation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`group_id, uid ` +
		`FROM custmchat.agent_group_relation ` +
		`WHERE uid = ? AND group_id = ?`

	// run query
	XOLog(sqlstr, uid, groupID)
	agr := AgentGroupRelation{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, uid, groupID).Scan(&agr.GroupID, &agr.UID)
	if err != nil {
		return nil, err
	}

	return &agr, nil
}
