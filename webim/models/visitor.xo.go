// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Visitor represents a row from 'custmchat.visitor'.
type Visitor struct {
	ID               string    `json:"id"`                 // id
	EntID            string    `json:"ent_id"`             // ent_id
	TraceID          string    `json:"trace_id"`           // trace_id
	Name             string    `json:"name"`               // name
	Age              int       `json:"age"`                // age
	Gender           string    `json:"gender"`             // gender
	Avatar           string    `json:"avatar"`             // avatar
	Mobile           string    `json:"mobile"`             // mobile
	Weibo            string    `json:"weibo"`              // weibo
	Wechat           string    `json:"wechat"`             // wechat
	Email            string    `json:"email"`              // email
	QqNum            string    `json:"qq_num"`             // qq_num
	Address          string    `json:"address"`            // address
	Remark           string    `json:"remark"`             // remark
	VisitCnt         int       `json:"visit_cnt"`          // visit_cnt
	VisitPageCnt     int       `json:"visit_page_cnt"`     // visit_page_cnt
	ResidenceTimeSec int       `json:"residence_time_sec"` // residence_time_sec
	LastVisitID      string    `json:"last_visit_id"`      // last_visit_id
	VisitedAt        time.Time `json:"visited_at"`         // visited_at
	CreatedAt        time.Time `json:"created_at"`         // created_at
	UpdatedAt        time.Time `json:"updated_at"`         // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Visitor exists in the database.
func (v *Visitor) Exists() bool {
	return v._exists
}

// Deleted provides information if the Visitor has been deleted from the database.
func (v *Visitor) Deleted() bool {
	return v._deleted
}

// Insert inserts the Visitor to the database.
func (v *Visitor) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if v._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.visitor (` +
		`id, ent_id, trace_id, name, age, gender, avatar, mobile, weibo, wechat, email, qq_num, address, remark, visit_cnt, visit_page_cnt, residence_time_sec, last_visit_id, visited_at, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, v.ID, v.EntID, v.TraceID, v.Name, v.Age, v.Gender, v.Avatar, v.Mobile, v.Weibo, v.Wechat, v.Email, v.QqNum, v.Address, v.Remark, v.VisitCnt, v.VisitPageCnt, v.ResidenceTimeSec, v.LastVisitID, v.VisitedAt, v.CreatedAt, v.UpdatedAt)
	_, err = db.Exec(sqlstr, v.ID, v.EntID, v.TraceID, v.Name, v.Age, v.Gender, v.Avatar, v.Mobile, v.Weibo, v.Wechat, v.Email, v.QqNum, v.Address, v.Remark, v.VisitCnt, v.VisitPageCnt, v.ResidenceTimeSec, v.LastVisitID, v.VisitedAt, v.CreatedAt, v.UpdatedAt)
	if err != nil {
		return err
	}

	// set existence
	v._exists = true

	return nil
}

// Update updates the Visitor in the database.
func (v *Visitor) Update(db XODB) error {
	var err error

	// sql query
	const sqlstr = `UPDATE custmchat.visitor SET ` +
		`ent_id = ?, trace_id = ?, name = ?, age = ?, gender = ?, avatar = ?, mobile = ?, weibo = ?, wechat = ?, email = ?, qq_num = ?, address = ?, remark = ?, visit_cnt = ?, visit_page_cnt = ?, residence_time_sec = ?, last_visit_id = ?, visited_at = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, v.EntID, v.TraceID, v.Name, v.Age, v.Gender, v.Avatar, v.Mobile, v.Weibo, v.Wechat, v.Email, v.QqNum, v.Address, v.Remark, v.VisitCnt, v.VisitPageCnt, v.ResidenceTimeSec, v.LastVisitID, v.VisitedAt, v.CreatedAt, v.UpdatedAt, v.ID)
	_, err = db.Exec(sqlstr, v.EntID, v.TraceID, v.Name, v.Age, v.Gender, v.Avatar, v.Mobile, v.Weibo, v.Wechat, v.Email, v.QqNum, v.Address, v.Remark, v.VisitCnt, v.VisitPageCnt, v.ResidenceTimeSec, v.LastVisitID, v.VisitedAt, v.CreatedAt, v.UpdatedAt, v.ID)
	return err
}

// Save saves the Visitor to the database.
func (v *Visitor) Save(db XODB) error {
	if v.Exists() {
		return v.Update(db)
	}

	return v.Insert(db)
}

// Delete deletes the Visitor from the database.
func (v *Visitor) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !v._exists {
		return nil
	}

	// if deleted, bail
	if v._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM custmchat.visitor WHERE id = ?`

	// run query
	XOLog(sqlstr, v.ID)
	_, err = db.Exec(sqlstr, v.ID)
	if err != nil {
		return err
	}

	// set deleted
	v._deleted = true

	return nil
}

// VisitorsByEntIDCreatedAt retrieves a row from 'custmchat.visitor' as a Visitor.
//
// Generated from index 'idx_ent_id_created_at'.
func VisitorsByEntIDCreatedAt(db XODB, entID string, createdAt time.Time) ([]*Visitor, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, trace_id, name, age, gender, avatar, mobile, weibo, wechat, email, qq_num, address, remark, visit_cnt, visit_page_cnt, residence_time_sec, last_visit_id, visited_at, created_at, updated_at ` +
		`FROM custmchat.visitor ` +
		`WHERE ent_id = ? AND created_at = ?`

	// run query
	XOLog(sqlstr, entID, createdAt)
	q, err := db.Query(sqlstr, entID, createdAt)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Visitor{}
	for q.Next() {
		v := Visitor{
			_exists: true,
		}

		// scan
		err = q.Scan(&v.ID, &v.EntID, &v.TraceID, &v.Name, &v.Age, &v.Gender, &v.Avatar, &v.Mobile, &v.Weibo, &v.Wechat, &v.Email, &v.QqNum, &v.Address, &v.Remark, &v.VisitCnt, &v.VisitPageCnt, &v.ResidenceTimeSec, &v.LastVisitID, &v.VisitedAt, &v.CreatedAt, &v.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &v)
	}

	return res, nil
}

// VisitorByEntIDTraceID retrieves a row from 'custmchat.visitor' as a Visitor.
//
// Generated from index 'udx_ent_id_trace_id'.
func VisitorByEntIDTraceID(db XODB, entID string, traceID string) (*Visitor, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, trace_id, name, age, gender, avatar, mobile, weibo, wechat, email, qq_num, address, remark, visit_cnt, visit_page_cnt, residence_time_sec, last_visit_id, visited_at, created_at, updated_at ` +
		`FROM custmchat.visitor ` +
		`WHERE ent_id = ? AND trace_id = ?`

	// run query
	XOLog(sqlstr, entID, traceID)
	v := Visitor{}

	err = db.QueryRow(sqlstr, entID, traceID).Scan(&v.ID, &v.EntID, &v.TraceID, &v.Name, &v.Age, &v.Gender, &v.Avatar, &v.Mobile, &v.Weibo, &v.Wechat, &v.Email, &v.QqNum, &v.Address, &v.Remark, &v.VisitCnt, &v.VisitPageCnt, &v.ResidenceTimeSec, &v.LastVisitID, &v.VisitedAt, &v.CreatedAt, &v.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &v, nil
}

// VisitorByID retrieves a row from 'custmchat.visitor' as a Visitor.
//
// Generated from index 'visitor_id_pkey'.
func VisitorByID(db XODB, id string) (*Visitor, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, trace_id, name, age, gender, avatar, mobile, weibo, wechat, email, qq_num, address, remark, visit_cnt, visit_page_cnt, residence_time_sec, last_visit_id, visited_at, created_at, updated_at ` +
		`FROM custmchat.visitor ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	v := Visitor{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&v.ID, &v.EntID, &v.TraceID, &v.Name, &v.Age, &v.Gender, &v.Avatar, &v.Mobile, &v.Weibo, &v.Wechat, &v.Email, &v.QqNum, &v.Address, &v.Remark, &v.VisitCnt, &v.VisitPageCnt, &v.ResidenceTimeSec, &v.LastVisitID, &v.VisitedAt, &v.CreatedAt, &v.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &v, nil
}
