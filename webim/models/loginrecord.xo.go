// Package new_models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// LoginRecord represents a row from 'custmchat.login_records'.
type LoginRecord struct {
	ID          string    `json:"id"`           // id
	AgentID     string    `json:"agent_id"`     // agent_id
	EntID       string    `json:"ent_id"`       // ent_id
	LoginAt     time.Time `json:"login_at"`     // login_at
	LoginClient string    `json:"login_client"` // login_client
	LoginIP     string    `json:"login_ip"`     // login_ip
	DeviceInfo  string    `json:"device_info"`  // device_info

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the LoginRecord exists in the database.
func (lr *LoginRecord) Exists() bool {
	return lr._exists
}

// Deleted provides information if the LoginRecord has been deleted from the database.
func (lr *LoginRecord) Deleted() bool {
	return lr._deleted
}

// Insert inserts the LoginRecord to the database.
func (lr *LoginRecord) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if lr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.login_records (` +
		`id, agent_id, ent_id, login_at, login_client, login_ip, device_info` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, lr.ID, lr.AgentID, lr.EntID, lr.LoginAt, lr.LoginClient, lr.LoginIP, lr.DeviceInfo)
	_, err = db.Exec(sqlstr, lr.ID, lr.AgentID, lr.EntID, lr.LoginAt, lr.LoginClient, lr.LoginIP, lr.DeviceInfo)
	if err != nil {
		return err
	}

	// set existence
	lr._exists = true

	return nil
}

// Update updates the LoginRecord in the database.
func (lr *LoginRecord) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !lr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if lr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE custmchat.login_records SET ` +
		`agent_id = ?, ent_id = ?, login_at = ?, login_client = ?, login_ip = ?, device_info = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, lr.AgentID, lr.EntID, lr.LoginAt, lr.LoginClient, lr.LoginIP, lr.DeviceInfo, lr.ID)
	_, err = db.Exec(sqlstr, lr.AgentID, lr.EntID, lr.LoginAt, lr.LoginClient, lr.LoginIP, lr.DeviceInfo, lr.ID)
	return err
}

// Save saves the LoginRecord to the database.
func (lr *LoginRecord) Save(db XODB) error {
	if lr.Exists() {
		return lr.Update(db)
	}

	return lr.Insert(db)
}

// Delete deletes the LoginRecord from the database.
func (lr *LoginRecord) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !lr._exists {
		return nil
	}

	// if deleted, bail
	if lr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM custmchat.login_records WHERE id = ?`

	// run query
	XOLog(sqlstr, lr.ID)
	_, err = db.Exec(sqlstr, lr.ID)
	if err != nil {
		return err
	}

	// set deleted
	lr._deleted = true

	return nil
}

// LoginRecordsByAgentID retrieves a row from 'custmchat.login_records' as a LoginRecord.
//
// Generated from index 'idx_agent'.
func LoginRecordsByAgentID(db XODB, agentID string) ([]*LoginRecord, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, agent_id, ent_id, login_at, login_client, login_ip, device_info ` +
		`FROM custmchat.login_records ` +
		`WHERE agent_id = ?`

	// run query
	XOLog(sqlstr, agentID)
	q, err := db.Query(sqlstr, agentID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*LoginRecord{}
	for q.Next() {
		lr := LoginRecord{
			_exists: true,
		}

		// scan
		err = q.Scan(&lr.ID, &lr.AgentID, &lr.EntID, &lr.LoginAt, &lr.LoginClient, &lr.LoginIP, &lr.DeviceInfo)
		if err != nil {
			return nil, err
		}

		res = append(res, &lr)
	}

	return res, nil
}

// LoginRecordsByEntID retrieves a row from 'custmchat.login_records' as a LoginRecord.
//
// Generated from index 'idx_ent'.
func LoginRecordsByEntID(db XODB, entID string) ([]*LoginRecord, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, agent_id, ent_id, login_at, login_client, login_ip, device_info ` +
		`FROM custmchat.login_records ` +
		`WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, entID)
	q, err := db.Query(sqlstr, entID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*LoginRecord{}
	for q.Next() {
		lr := LoginRecord{
			_exists: true,
		}

		// scan
		err = q.Scan(&lr.ID, &lr.AgentID, &lr.EntID, &lr.LoginAt, &lr.LoginClient, &lr.LoginIP, &lr.DeviceInfo)
		if err != nil {
			return nil, err
		}

		res = append(res, &lr)
	}

	return res, nil
}

// LoginRecordByID retrieves a row from 'custmchat.login_records' as a LoginRecord.
//
// Generated from index 'login_records_id_pkey'.
func LoginRecordByID(db XODB, id string) (*LoginRecord, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, agent_id, ent_id, login_at, login_client, login_ip, device_info ` +
		`FROM custmchat.login_records ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	lr := LoginRecord{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&lr.ID, &lr.AgentID, &lr.EntID, &lr.LoginAt, &lr.LoginClient, &lr.LoginIP, &lr.DeviceInfo)
	if err != nil {
		return nil, err
	}

	return &lr, nil
}
