// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// ConversationTransfer represents a row from 'custmchat.conversation_transfer'.
type ConversationTransfer struct {
	EntID          string `json:"ent_id"`          // ent_id
	Duration       int    `json:"duration"`        // duration
	TransferTarget string `json:"transfer_target"` // transfer_target
	TargetType     string `json:"target_type"`     // target_type
	Status         bool   `json:"status"`          // status

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ConversationTransfer exists in the database.
func (ct *ConversationTransfer) Exists() bool {
	return ct._exists
}

// Deleted provides information if the ConversationTransfer has been deleted from the database.
func (ct *ConversationTransfer) Deleted() bool {
	return ct._deleted
}

// Insert inserts the ConversationTransfer to the database.
func (ct *ConversationTransfer) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ct._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.conversation_transfer (` +
		`ent_id, duration, transfer_target, target_type, status` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ct.EntID, ct.Duration, ct.TransferTarget, ct.TargetType, ct.Status)
	_, err = db.Exec(sqlstr, ct.EntID, ct.Duration, ct.TransferTarget, ct.TargetType, ct.Status)
	if err != nil {
		return err
	}

	// set existence
	ct._exists = true

	return nil
}

// Update updates the ConversationTransfer in the database.
func (ct *ConversationTransfer) Update(db XODB) error {
	var err error

	// sql query
	const sqlstr = `UPDATE custmchat.conversation_transfer SET ` +
		`duration = ?, transfer_target = ?, target_type = ?, status = ?` +
		` WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, ct.Duration, ct.TransferTarget, ct.TargetType, ct.Status, ct.EntID)
	_, err = db.Exec(sqlstr, ct.Duration, ct.TransferTarget, ct.TargetType, ct.Status, ct.EntID)
	return err
}

// Save saves the ConversationTransfer to the database.
func (ct *ConversationTransfer) Save(db XODB) error {
	if ct.Exists() {
		return ct.Update(db)
	}

	return ct.Insert(db)
}

// Delete deletes the ConversationTransfer from the database.
func (ct *ConversationTransfer) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ct._exists {
		return nil
	}

	// if deleted, bail
	if ct._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM custmchat.conversation_transfer WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, ct.EntID)
	_, err = db.Exec(sqlstr, ct.EntID)
	if err != nil {
		return err
	}

	// set deleted
	ct._deleted = true

	return nil
}

// ConversationTransferByEntID retrieves a row from 'custmchat.conversation_transfer' as a ConversationTransfer.
//
// Generated from index 'conversation_transfer_ent_id_pkey'.
func ConversationTransferByEntID(db XODB, entID string) (*ConversationTransfer, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ent_id, duration, transfer_target, target_type, status ` +
		`FROM custmchat.conversation_transfer ` +
		`WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, entID)
	ct := ConversationTransfer{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, entID).Scan(&ct.EntID, &ct.Duration, &ct.TransferTarget, &ct.TargetType, &ct.Status)
	if err != nil {
		return nil, err
	}

	return &ct, nil
}
