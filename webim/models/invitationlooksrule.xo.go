// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// InvitationLooksRule represents a row from 'custmchat.invitation_looks_rules'.
type InvitationLooksRule struct {
	ID        string    `json:"id"`         // id
	EntID     string    `json:"ent_id"`     // ent_id
	Rule      string    `json:"rule"`       // rule
	CreatedAt time.Time `json:"created_at"` // created_at
	UpdatedAt time.Time `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the InvitationLooksRule exists in the database.
func (ilr *InvitationLooksRule) Exists() bool {
	return ilr._exists
}

// Deleted provides information if the InvitationLooksRule has been deleted from the database.
func (ilr *InvitationLooksRule) Deleted() bool {
	return ilr._deleted
}

// Insert inserts the InvitationLooksRule to the database.
func (ilr *InvitationLooksRule) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ilr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.invitation_looks_rules (` +
		`id, ent_id, rule, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ilr.ID, ilr.EntID, ilr.Rule, ilr.CreatedAt, ilr.UpdatedAt)
	_, err = db.Exec(sqlstr, ilr.ID, ilr.EntID, ilr.Rule, ilr.CreatedAt, ilr.UpdatedAt)
	if err != nil {
		return err
	}

	// set existence
	ilr._exists = true

	return nil
}

// Update updates the InvitationLooksRule in the database.
func (ilr *InvitationLooksRule) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ilr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ilr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE custmchat.invitation_looks_rules SET ` +
		`ent_id = ?, rule = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ilr.EntID, ilr.Rule, ilr.CreatedAt, ilr.UpdatedAt, ilr.ID)
	_, err = db.Exec(sqlstr, ilr.EntID, ilr.Rule, ilr.CreatedAt, ilr.UpdatedAt, ilr.ID)
	return err
}

// Save saves the InvitationLooksRule to the database.
func (ilr *InvitationLooksRule) Save(db XODB) error {
	if ilr.Exists() {
		return ilr.Update(db)
	}

	return ilr.Insert(db)
}

// Delete deletes the InvitationLooksRule from the database.
func (ilr *InvitationLooksRule) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ilr._exists {
		return nil
	}

	// if deleted, bail
	if ilr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM custmchat.invitation_looks_rules WHERE id = ?`

	// run query
	XOLog(sqlstr, ilr.ID)
	_, err = db.Exec(sqlstr, ilr.ID)
	if err != nil {
		return err
	}

	// set deleted
	ilr._deleted = true

	return nil
}

// InvitationLooksRulesByEntID retrieves a row from 'custmchat.invitation_looks_rules' as a InvitationLooksRule.
//
// Generated from index 'idx_ent_id'.
func InvitationLooksRulesByEntID(db XODB, entID string) ([]*InvitationLooksRule, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, rule, created_at, updated_at ` +
		`FROM custmchat.invitation_looks_rules ` +
		`WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, entID)
	q, err := db.Query(sqlstr, entID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*InvitationLooksRule{}
	for q.Next() {
		ilr := InvitationLooksRule{
			_exists: true,
		}

		// scan
		err = q.Scan(&ilr.ID, &ilr.EntID, &ilr.Rule, &ilr.CreatedAt, &ilr.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &ilr)
	}

	return res, nil
}

// InvitationLooksRuleByID retrieves a row from 'custmchat.invitation_looks_rules' as a InvitationLooksRule.
//
// Generated from index 'invitation_looks_rules_id_pkey'.
func InvitationLooksRuleByID(db XODB, id string) (*InvitationLooksRule, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, rule, created_at, updated_at ` +
		`FROM custmchat.invitation_looks_rules ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ilr := InvitationLooksRule{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ilr.ID, &ilr.EntID, &ilr.Rule, &ilr.CreatedAt, &ilr.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &ilr, nil
}
