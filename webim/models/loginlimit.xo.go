// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// LoginLimit represents a row from 'custmchat.login_limit'.
type LoginLimit struct {
	EntID         string         `json:"ent_id"`          // ent_id
	Status        bool           `json:"status"`          // status
	GroupIds      sql.NullString `json:"group_ids"`       // group_ids
	CityList      sql.NullString `json:"city_list"`       // city_list
	AllowedIPList sql.NullString `json:"allowed_ip_list"` // allowed_ip_list

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the LoginLimit exists in the database.
func (ll *LoginLimit) Exists() bool {
	return ll._exists
}

// Deleted provides information if the LoginLimit has been deleted from the database.
func (ll *LoginLimit) Deleted() bool {
	return ll._deleted
}

// Insert inserts the LoginLimit to the database.
func (ll *LoginLimit) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ll._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.login_limit (` +
		`ent_id, status, group_ids, city_list, allowed_ip_list` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`
	// run query
	XOLog(sqlstr, ll.EntID, ll.Status, ll.GroupIds, ll.CityList, ll.AllowedIPList)
	_, err = db.Exec(sqlstr, ll.EntID, ll.Status, ll.GroupIds, ll.CityList, ll.AllowedIPList)
	if err != nil {
		return err
	}

	// set existence
	ll._exists = true

	return nil
}

// Update updates the LoginLimit in the database.
func (ll *LoginLimit) Update(db XODB) error {
	var err error

	// sql query
	const sqlstr = `UPDATE custmchat.login_limit SET ` +
		`status = ?, group_ids = ?, city_list = ?, allowed_ip_list = ?` +
		` WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, ll.Status, ll.GroupIds, ll.CityList, ll.AllowedIPList, ll.EntID)
	_, err = db.Exec(sqlstr, ll.Status, ll.GroupIds, ll.CityList, ll.AllowedIPList, ll.EntID)
	return err
}

// Save saves the LoginLimit to the database.
func (ll *LoginLimit) Save(db XODB) error {
	if ll.Exists() {
		return ll.Update(db)
	}

	return ll.Insert(db)
}

// Delete deletes the LoginLimit from the database.
func (ll *LoginLimit) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ll._exists {
		return nil
	}

	// if deleted, bail
	if ll._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM custmchat.login_limit WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, ll.EntID)
	_, err = db.Exec(sqlstr, ll.EntID)
	if err != nil {
		return err
	}

	// set deleted
	ll._deleted = true

	return nil
}

// LoginLimitByEntID retrieves a row from 'custmchat.login_limit' as a LoginLimit.
//
// Generated from index 'ent_id'.
func LoginLimitByEntID(db XODB, entID string) (*LoginLimit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ent_id, status, group_ids, city_list, allowed_ip_list ` +
		`FROM custmchat.login_limit ` +
		`WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, entID)
	ll := LoginLimit{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, entID).Scan(&ll.EntID, &ll.Status, &ll.GroupIds, &ll.CityList, &ll.AllowedIPList)
	if err != nil {
		return nil, err
	}

	return &ll, nil
}
