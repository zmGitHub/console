// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"time"
)

// UserSegment represents a row from 'custmchat.user_segments'.
type UserSegment struct {
	ID        string         `json:"id"`         // id
	EntID     string         `json:"ent_id"`     // ent_id
	Name      string         `json:"name"`       // name
	Rules     sql.NullString `json:"rules"`      // rules
	CreatedAt time.Time      `json:"created_at"` // created_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UserSegment exists in the database.
func (us *UserSegment) Exists() bool {
	return us._exists
}

// Deleted provides information if the UserSegment has been deleted from the database.
func (us *UserSegment) Deleted() bool {
	return us._deleted
}

// Insert inserts the UserSegment to the database.
func (us *UserSegment) Insert(db XODB) error {
	var err error

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.user_segments (` +
		`id, ent_id, name, rules, created_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, us.ID, us.EntID, us.Name, us.Rules, us.CreatedAt)
	_, err = db.Exec(sqlstr, us.ID, us.EntID, us.Name, us.Rules, us.CreatedAt)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the UserSegment in the database.
func (us *UserSegment) Update(db XODB) error {
	var err error

	// sql query
	const sqlstr = `UPDATE custmchat.user_segments SET ` +
		`ent_id = ?, name = ?, rules = ?, created_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, us.EntID, us.Name, us.Rules, us.CreatedAt, us.ID)
	_, err = db.Exec(sqlstr, us.EntID, us.Name, us.Rules, us.CreatedAt, us.ID)
	return err
}

// Save saves the UserSegment to the database.
func (us *UserSegment) Save(db XODB) error {
	if us.Exists() {
		return us.Update(db)
	}

	return us.Insert(db)
}

// Delete deletes the UserSegment from the database.
func (us *UserSegment) Delete(db XODB) error {
	var err error

	// sql query
	const sqlstr = `DELETE FROM custmchat.user_segments WHERE id = ?`

	// run query
	XOLog(sqlstr, us.ID)
	_, err = db.Exec(sqlstr, us.ID)
	if err != nil {
		return err
	}

	return nil
}

// UserSegmentsByEntID retrieves a row from 'custmchat.user_segments' as a UserSegment.
//
// Generated from index 'idx_ent_id'.
func UserSegmentsByEntID(db XODB, entID string) ([]*UserSegment, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, name, rules, created_at ` +
		`FROM custmchat.user_segments ` +
		`WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, entID)
	q, err := db.Query(sqlstr, entID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*UserSegment{}
	for q.Next() {
		us := UserSegment{
			_exists: true,
		}

		// scan
		err = q.Scan(&us.ID, &us.EntID, &us.Name, &us.Rules, &us.CreatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &us)
	}

	return res, nil
}

// UserSegmentByID retrieves a row from 'custmchat.user_segments' as a UserSegment.
//
// Generated from index 'user_segments_id_pkey'.
func UserSegmentByID(db XODB, id string) (*UserSegment, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, name, rules, created_at ` +
		`FROM custmchat.user_segments ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	us := UserSegment{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&us.ID, &us.EntID, &us.Name, &us.Rules, &us.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &us, nil
}
