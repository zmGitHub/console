// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// VisitorQueue represents a row from 'custmchat.visitor_queue'.
type VisitorQueue struct {
	EntID     string    `json:"ent_id"`     // ent_id
	TrackID   string    `json:"track_id"`   // track_id
	VisitID   string    `json:"visit_id"`   // visit_id
	EnqueueAt time.Time `json:"enqueue_at"` // enqueue_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the VisitorQueue exists in the database.
func (vq *VisitorQueue) Exists() bool {
	return vq._exists
}

// Deleted provides information if the VisitorQueue has been deleted from the database.
func (vq *VisitorQueue) Deleted() bool {
	return vq._deleted
}

// Insert inserts the VisitorQueue to the database.
func (vq *VisitorQueue) Insert(db XODB) error {
	var err error

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.visitor_queue (` +
		`ent_id, track_id, visit_id, enqueue_at` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`) ` +
		`ON DUPLICATE KEY UPDATE visit_id = VALUES(visit_id), enqueue_at = VALUES(enqueue_at) `

	// run query
	_, err = db.Exec(sqlstr, vq.EntID, vq.TrackID, vq.VisitID, vq.EnqueueAt)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the VisitorQueue in the database.
func (vq *VisitorQueue) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vq._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if vq._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE custmchat.visitor_queue SET ` +
		`ent_id = ?, visit_id = ?, enqueue_at = ?` +
		` WHERE track_id = ?`

	// run query
	XOLog(sqlstr, vq.EntID, vq.VisitID, vq.EnqueueAt, vq.TrackID)
	_, err = db.Exec(sqlstr, vq.EntID, vq.VisitID, vq.EnqueueAt, vq.TrackID)
	return err
}

// Save saves the VisitorQueue to the database.
func (vq *VisitorQueue) Save(db XODB) error {
	if vq.Exists() {
		return vq.Update(db)
	}

	return vq.Insert(db)
}

// Delete deletes the VisitorQueue from the database.
func (vq *VisitorQueue) Delete(db XODB) error {
	var err error

	// sql query
	const sqlstr = `DELETE FROM custmchat.visitor_queue WHERE track_id = ?`

	// run query
	XOLog(sqlstr, vq.TrackID)
	_, err = db.Exec(sqlstr, vq.TrackID)
	if err != nil {
		return err
	}

	return nil
}

// VisitorQueuesByEntID retrieves a row from 'custmchat.visitor_queue' as a VisitorQueue.
//
// Generated from index 'idx_ent'.
func VisitorQueuesByEntID(db XODB, entID string) ([]*VisitorQueue, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ent_id, track_id, visit_id, enqueue_at ` +
		`FROM custmchat.visitor_queue ` +
		`WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, entID)
	q, err := db.Query(sqlstr, entID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VisitorQueue{}
	for q.Next() {
		vq := VisitorQueue{
			_exists: true,
		}

		// scan
		err = q.Scan(&vq.EntID, &vq.TrackID, &vq.VisitID, &vq.EnqueueAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &vq)
	}

	return res, nil
}

// VisitorQueueByTrackID retrieves a row from 'custmchat.visitor_queue' as a VisitorQueue.
//
// Generated from index 'track_id'.
func VisitorQueueByTrackID(db XODB, trackID string) (*VisitorQueue, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ent_id, track_id, visit_id, enqueue_at ` +
		`FROM custmchat.visitor_queue ` +
		`WHERE track_id = ?`

	vq := VisitorQueue{}
	err = db.QueryRow(sqlstr, trackID).Scan(&vq.EntID, &vq.TrackID, &vq.VisitID, &vq.EnqueueAt)
	if err != nil {
		return nil, err
	}

	return &vq, nil
}

func GetVisitorPosition(db XODB, trackID string) (pos int, err error) {
	const sqlstr = `SELECT track_id ` +
		` FROM custmchat.visitor_queue ` +
		` WHERE track_id = ? ORDER BY enqueue_at ASC`

	q, err := db.Query(sqlstr, trackID)
	if err != nil {
		return -1, err
	}
	defer q.Close()

	res := []*VisitorQueue{}
	for q.Next() {
		vq := VisitorQueue{}
		err = q.Scan(&vq.TrackID)
		if err != nil {
			return -1, err
		}

		res = append(res, &vq)
	}
	if err = q.Err(); err != nil {
		return -1, err
	}

	for p, v := range res {
		if v.TrackID == trackID {
			pos = p + 1
			return
		}
	}

	return 1, nil
}

func VisitorQueueCount(db XODB, entID string) (count int, err error) {
	query := `SELECT COUNT(track_id) FROM custmchat.visitor_queue WHERE ent_id=?`
	err = db.QueryRow(query, entID).Scan(&count)
	return
}
