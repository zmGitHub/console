// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"fmt"
	"strings"
	"time"
)

// ConversationStat represents a row from 'custmchat.conversation_stats'.
type ConversationStat struct {
	EntID          string    `json:"ent_id"`           // ent_id
	TotalCount     uint      `json:"total_count"`      // total_count
	EffectiveCount uint      `json:"effective_count"`  // effective_count
	MessageCount   uint      `json:"message_count"`    // message_count
	GoodCount      uint      `json:"good_count"`       // good_count
	MediumCount    uint      `json:"medium_count"`     // medium_count
	BadCount       uint      `json:"bad_count"`        // bad_count
	GoldCount      uint      `json:"gold_count"`       // gold_count
	SilverCount    uint      `json:"silver_count"`     // silver_count
	BronzeCount    uint      `json:"bronze_count"`     // bronze_count
	NoGradeCount   uint      `json:"no_grade_count"`   // no_grade_count
	DurationInSec  uint      `json:"duration_in_sec"`  // duration_in_sec
	RemarkCount    uint      `json:"remark_count"`     // remark_count
	VisitCount     uint      `json:"visit_count"`      // visit_count
	VisitPageCount uint      `json:"visit_page_count"` // visit_page_count
	VisitorCount   uint      `json:"visitor_count"`    // visitor_count
	WaitTimeInSec  uint      `json:"wait_time_in_sec"` // wait_time_in_sec
	CreatedAt      time.Time `json:"created_at"`       // created_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ConversationStat exists in the database.
func (cs *ConversationStat) Exists() bool {
	return cs._exists
}

// Deleted provides information if the ConversationStat has been deleted from the database.
func (cs *ConversationStat) Deleted() bool {
	return cs._deleted
}

// Insert inserts the ConversationStat to the database.
func (cs *ConversationStat) Insert(db XODB, updates []string) error {
	var err error

	sqlstr := `INSERT INTO custmchat.conversation_stats (` +
		`ent_id, total_count, effective_count, message_count, good_count, medium_count, bad_count, gold_count, silver_count, bronze_count, no_grade_count, duration_in_sec, remark_count, visit_count, visit_page_count, visitor_count, wait_time_in_sec, created_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`) ` +
		`ON DUPLICATE KEY UPDATE %s`

	var placeHolders []string
	var args = []interface{}{
		cs.EntID, cs.TotalCount, cs.EffectiveCount, cs.MessageCount, cs.GoodCount, cs.MediumCount, cs.BadCount, cs.GoldCount, cs.SilverCount, cs.BronzeCount, cs.NoGradeCount, cs.DurationInSec, cs.RemarkCount, cs.VisitCount, cs.VisitPageCount, cs.VisitorCount, cs.WaitTimeInSec, cs.CreatedAt,
	}
	for _, name := range updates {
		placeHolders = append(placeHolders, fmt.Sprintf("%s = %s + VALUES(%s)", name, name, name))
	}

	sqlstr = fmt.Sprintf(sqlstr, strings.Join(placeHolders, ","))
	_, err = db.Exec(sqlstr, args...)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the ConversationStat in the database.
func (cs *ConversationStat) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cs._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if cs._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query with composite primary key
	const sqlstr = `UPDATE custmchat.conversation_stats SET ` +
		`total_count = ?, effective_count = ?, message_count = ?, good_count = ?, medium_count = ?, bad_count = ?, gold_count = ?, silver_count = ?, bronze_count = ?, no_grade_count = ?, duration_in_sec = ?, remark_count = ?, visit_count = ?, visit_page_count = ?, visitor_count = ?, wait_time_in_sec = ?` +
		` WHERE ent_id = ? AND created_at = ?`

	// run query
	XOLog(sqlstr, cs.TotalCount, cs.EffectiveCount, cs.MessageCount, cs.GoodCount, cs.MediumCount, cs.BadCount, cs.GoldCount, cs.SilverCount, cs.BronzeCount, cs.NoGradeCount, cs.DurationInSec, cs.RemarkCount, cs.VisitCount, cs.VisitPageCount, cs.VisitorCount, cs.WaitTimeInSec, cs.EntID, cs.CreatedAt)
	_, err = db.Exec(sqlstr, cs.TotalCount, cs.EffectiveCount, cs.MessageCount, cs.GoodCount, cs.MediumCount, cs.BadCount, cs.GoldCount, cs.SilverCount, cs.BronzeCount, cs.NoGradeCount, cs.DurationInSec, cs.RemarkCount, cs.VisitCount, cs.VisitPageCount, cs.VisitorCount, cs.WaitTimeInSec, cs.EntID, cs.CreatedAt)
	return err
}

// Delete deletes the ConversationStat from the database.
func (cs *ConversationStat) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cs._exists {
		return nil
	}

	// if deleted, bail
	if cs._deleted {
		return nil
	}

	// sql query with composite primary key
	const sqlstr = `DELETE FROM custmchat.conversation_stats WHERE ent_id = ? AND created_at = ?`

	// run query
	XOLog(sqlstr, cs.EntID, cs.CreatedAt)
	_, err = db.Exec(sqlstr, cs.EntID, cs.CreatedAt)
	if err != nil {
		return err
	}

	// set deleted
	cs._deleted = true

	return nil
}

// ConversationStatByCreatedAt retrieves a row from 'custmchat.conversation_stats' as a ConversationStat.
//
// Generated from index 'conversation_stats_created_at_pkey'.
func ConversationStatByCreatedAt(db XODB, createdAt time.Time) (*ConversationStat, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ent_id, total_count, effective_count, message_count, good_count, medium_count, bad_count, gold_count, silver_count, bronze_count, no_grade_count, duration_in_sec, remark_count, visit_count, visit_page_count, visitor_count, wait_time_in_sec, created_at ` +
		`FROM custmchat.conversation_stats ` +
		`WHERE created_at = ?`

	// run query
	XOLog(sqlstr, createdAt)
	cs := ConversationStat{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, createdAt).Scan(&cs.EntID, &cs.TotalCount, &cs.EffectiveCount, &cs.MessageCount, &cs.GoodCount, &cs.MediumCount, &cs.BadCount, &cs.GoldCount, &cs.SilverCount, &cs.BronzeCount, &cs.NoGradeCount, &cs.DurationInSec, &cs.RemarkCount, &cs.VisitCount, &cs.VisitPageCount, &cs.VisitorCount, &cs.WaitTimeInSec, &cs.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &cs, nil
}

// ConversationStatByEntIDCreatedAt retrieves a row from 'custmchat.conversation_stats' as a ConversationStat.
//
// Generated from index 'ent_create_Time'.
func ConversationStatByEntID(db XODB, entID string, start, end time.Time) (result map[int32]*ConversationStat, err error) {
	sqlstr := `SELECT ` +
		`ent_id, total_count, effective_count, message_count, good_count, medium_count, bad_count, gold_count, silver_count, bronze_count, no_grade_count, duration_in_sec, remark_count, visit_count, visit_page_count, visitor_count, wait_time_in_sec, created_at ` +
		`FROM custmchat.conversation_stats ` +
		`WHERE ent_id = ? AND created_at >= ? AND created_at <= ?`

	rows, err := db.Query(sqlstr, entID, start, end)
	if err != nil {
		return
	}
	defer rows.Close()

	result = map[int32]*ConversationStat{}
	for rows.Next() {
		cs := &ConversationStat{}
		err = rows.Scan(&cs.EntID, &cs.TotalCount, &cs.EffectiveCount, &cs.MessageCount, &cs.GoodCount, &cs.MediumCount, &cs.BadCount, &cs.GoldCount, &cs.SilverCount, &cs.BronzeCount, &cs.NoGradeCount, &cs.DurationInSec, &cs.RemarkCount, &cs.VisitCount, &cs.VisitPageCount, &cs.VisitorCount, &cs.WaitTimeInSec, &cs.CreatedAt)
		if err != nil {
			return nil, err
		}

		dt := getHourDateFromTime(cs.CreatedAt)
		result[dt] = cs
	}
	if err = rows.Err(); err != nil {
		return
	}

	return
}
