// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"time"
)

// Enterprise represents a row from 'custmchat.enterprise'.
type Enterprise struct {
	ID               string    `json:"id"`                // id
	Name             string    `json:"name"`              // name
	AdminID          string    `json:"admin_id"`          // admin_id
	AllocationRule   string    `json:"allocation_rule"`   // allocation_rule
	FullName         string    `json:"full_name"`         // full_name
	NickName         string    `json:"nick_name"`         // nick_name
	Province         string    `json:"province"`          // province
	City             string    `json:"city"`              // city
	Avatar           string    `json:"avatar"`            // avatar
	Industry         string    `json:"industry"`          // industry
	Location         string    `json:"location"`          // location
	Address          string    `json:"address"`           // address
	Website          string    `json:"website"`           // website
	Email            string    `json:"email"`             // email
	Mobile           string    `json:"mobile"`            // mobile
	Description      string    `json:"description"`       // description
	CreatedAt        time.Time `json:"created_at"`        // created_at
	Owner            string    `json:"owner"`             // owner
	Plan             int       `json:"plan"`              // plan
	AgentNum         int       `json:"agent_num"`         // agent_num
	TrialStatus      int       `json:"trial_status"`      // trial_status
	IsActivated      bool      `json:"is_activated"`      // is_activated
	ExpirationTime   time.Time `json:"expiration_time"`   // expiration_time
	LastActivatedAt  time.Time `json:"last_activated_at"` // last_activated_at
	ContactMobile    string    `json:"contact_mobile"`    // contact_mobile
	ContactEmail     string    `json:"contact_email"`     // contact_email
	ContactQq        string    `json:"contact_qq"`        // contact_qq
	ContactWechat    string    `json:"contact_wechat"`    // contact_wechat
	ContactSignature string    `json:"contact_signature"` // contact_signature
	ContactName      string    `json:"contact_name"`      // contact_name

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Enterprise exists in the database.
func (e *Enterprise) Exists() bool {
	return e._exists
}

// Deleted provides information if the Enterprise has been deleted from the database.
func (e *Enterprise) Deleted() bool {
	return e._deleted
}

// Insert inserts the Enterprise to the database.
func (e *Enterprise) Insert(db XODB) error {
	var err error

	// sql insert query, primary key must be provided
	sqlstr := `INSERT INTO custmchat.enterprise (` + EntFields +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	_, err = db.Exec(sqlstr, e.ID, e.Name, e.AdminID, e.AllocationRule, e.FullName, e.NickName,
		e.Province, e.City, e.Avatar, e.Industry, e.Location, e.Address, e.Website, e.Email, e.Mobile,
		e.Description, e.CreatedAt, e.Owner, e.Plan, e.AgentNum, e.TrialStatus, e.IsActivated, e.ExpirationTime, e.LastActivatedAt,
		e.ContactMobile, e.ContactEmail, e.ContactQq, e.ContactWechat, e.ContactSignature, e.ContactName)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the Enterprise in the database.
func (e *Enterprise) Update(db XODB) error {
	var err error

	// sql query
	const sqlstr = `UPDATE custmchat.enterprise SET ` +
		`name = ?, admin_id=?, allocation_rule=?, full_name = ?, nick_name = ?, province = ?, city = ?, ` +
		`avatar = ?, industry = ?, location = ?, address = ?, website = ?, email = ?, mobile = ?, description = ?, ` +
		`created_at = ?, owner = ?, plan = ?, agent_num = ?, trial_status = ?, is_activated=?, expiration_time = ?, last_activated_at = ?, ` +
		`contact_mobile = ?, contact_email = ?, contact_qq = ?, contact_wechat = ?, contact_signature = ?, contact_name = ? ` +
		` WHERE id = ?`

	_, err = db.Exec(sqlstr, e.Name, e.AdminID, e.AllocationRule, e.FullName, e.NickName, e.Province, e.City, e.Avatar, e.Industry, e.Location, e.Address, e.Website, e.Email, e.Mobile, e.Description, e.CreatedAt, e.Owner, e.Plan, e.AgentNum, e.TrialStatus, e.IsActivated, e.ExpirationTime, e.LastActivatedAt, e.ContactMobile, e.ContactEmail, e.ContactQq, e.ContactWechat, e.ContactSignature, e.ID)
	return err
}

// Save saves the Enterprise to the database.
func (e *Enterprise) Save(db XODB) error {
	if e.Exists() {
		return e.Update(db)
	}

	return e.Insert(db)
}

// Delete deletes the Enterprise from the database.
func (e *Enterprise) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return nil
	}

	// if deleted, bail
	if e._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM custmchat.enterprise WHERE id = ?`

	// run query
	XOLog(sqlstr, e.ID)
	_, err = db.Exec(sqlstr, e.ID)
	if err != nil {
		return err
	}

	// set deleted
	e._deleted = true

	return nil
}

// EnterpriseByEmail retrieves a row from 'custmchat.enterprise' as a Enterprise.
//
// Generated from index 'email'.
func EnterpriseByEmail(db XODB, email string) (*Enterprise, error) {
	var err error

	sqlstr := `SELECT ` + EntFields + ` FROM custmchat.enterprise WHERE email = ?`
	e := &Enterprise{}
	err = db.QueryRow(sqlstr, email).Scan(
		&e.ID, &e.Name, &e.AdminID, &e.AllocationRule, &e.FullName, &e.NickName,
		&e.Province, &e.City, &e.Avatar, &e.Industry, &e.Location, &e.Address, &e.Website,
		&e.Email, &e.Mobile, &e.Description, &e.CreatedAt, &e.Owner, &e.Plan,
		&e.AgentNum, &e.TrialStatus, &e.IsActivated, &e.ExpirationTime, &e.LastActivatedAt,
		&e.ContactMobile, &e.ContactEmail, &e.ContactQq, &e.ContactWechat, &e.ContactSignature, &e.ContactName)
	if err != nil {
		return nil, err
	}

	return e, nil
}

// EnterpriseByID retrieves a row from 'custmchat.enterprise' as a Enterprise.
//
// Generated from index 'enterprise_id_pkey'.
func EnterpriseByID(db XODB, id string) (*Enterprise, error) {
	var err error

	// sql query
	sqlstr := `SELECT ` + EntFields + ` FROM custmchat.enterprise WHERE id = ?`
	e := &Enterprise{}
	err = db.QueryRow(sqlstr, id).Scan(
		&e.ID, &e.Name, &e.AdminID, &e.AllocationRule, &e.FullName, &e.NickName,
		&e.Province, &e.City, &e.Avatar, &e.Industry, &e.Location, &e.Address, &e.Website,
		&e.Email, &e.Mobile, &e.Description, &e.CreatedAt, &e.Owner, &e.Plan,
		&e.AgentNum, &e.TrialStatus, &e.IsActivated, &e.ExpirationTime, &e.LastActivatedAt,
		&e.ContactMobile, &e.ContactEmail, &e.ContactQq, &e.ContactWechat, &e.ContactSignature, &e.ContactName)
	if err != nil {
		return nil, err
	}

	return e, nil
}

// EnterpriseByName retrieves a row from 'custmchat.enterprise' as a Enterprise.
//
// Generated from index 'name'.
func EnterpriseByName(db XODB, name string) (*Enterprise, error) {
	sqlstr := `SELECT ` + EntFields + ` FROM custmchat.enterprise WHERE name = ?`
	e := &Enterprise{}
	err := db.QueryRow(sqlstr, name).Scan(
		&e.ID, &e.Name, &e.AdminID, &e.AllocationRule, &e.FullName, &e.NickName,
		&e.Province, &e.City, &e.Avatar, &e.Industry, &e.Location, &e.Address, &e.Website,
		&e.Email, &e.Mobile, &e.Description, &e.CreatedAt, &e.Owner, &e.Plan,
		&e.AgentNum, &e.TrialStatus, &e.IsActivated, &e.ExpirationTime, &e.LastActivatedAt,
		&e.ContactMobile, &e.ContactEmail, &e.ContactQq, &e.ContactWechat, &e.ContactSignature, &e.ContactName)
	if err != nil {
		return nil, err
	}

	return e, nil
}
