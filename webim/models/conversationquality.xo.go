// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// ConversationQuality represents a row from 'custmchat.conversation_quality'.
type ConversationQuality struct {
	EntID           string `json:"ent_id"`            // ent_id
	Grade           string `json:"grade"`             // grade
	VisitorMsgCount int    `json:"visitor_msg_count"` // visitor_msg_count
	AgentMsgCount   int    `json:"agent_msg_count"`   // agent_msg_count
	Status          bool   `json:"status"`            // status

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ConversationQuality exists in the database.
func (cq *ConversationQuality) Exists() bool {
	return cq._exists
}

// Deleted provides information if the ConversationQuality has been deleted from the database.
func (cq *ConversationQuality) Deleted() bool {
	return cq._deleted
}

// Insert inserts the ConversationQuality to the database.
func (cq *ConversationQuality) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if cq._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.conversation_quality (` +
		`ent_id, grade, visitor_msg_count, agent_msg_count, status` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, cq.EntID, cq.Grade, cq.VisitorMsgCount, cq.AgentMsgCount, cq.Status)
	_, err = db.Exec(sqlstr, cq.EntID, cq.Grade, cq.VisitorMsgCount, cq.AgentMsgCount, cq.Status)
	if err != nil {
		return err
	}

	// set existence
	cq._exists = true

	return nil
}

// Update updates the ConversationQuality in the database.
func (cq *ConversationQuality) Update(db XODB) error {
	var err error

	// sql query
	const sqlstr = `UPDATE custmchat.conversation_quality SET ` +
		`grade = ?, visitor_msg_count = ?, agent_msg_count = ?, status = ?` +
		` WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, cq.Grade, cq.VisitorMsgCount, cq.AgentMsgCount, cq.Status, cq.EntID)
	_, err = db.Exec(sqlstr, cq.Grade, cq.VisitorMsgCount, cq.AgentMsgCount, cq.Status, cq.EntID)
	return err
}

// Save saves the ConversationQuality to the database.
func (cq *ConversationQuality) Save(db XODB) error {
	if cq.Exists() {
		return cq.Update(db)
	}

	return cq.Insert(db)
}

// Delete deletes the ConversationQuality from the database.
func (cq *ConversationQuality) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cq._exists {
		return nil
	}

	// if deleted, bail
	if cq._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM custmchat.conversation_quality WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, cq.EntID)
	_, err = db.Exec(sqlstr, cq.EntID)
	if err != nil {
		return err
	}

	// set deleted
	cq._deleted = true

	return nil
}

// ConversationQualityByEntID retrieves a row from 'custmchat.conversation_quality' as a ConversationQuality.
//
// Generated from index 'conversation_quality_ent_id_pkey'.
func ConversationQualityByEntID(db XODB, entID string) (*ConversationQuality, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ent_id, grade, visitor_msg_count, agent_msg_count, status ` +
		`FROM custmchat.conversation_quality ` +
		`WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, entID)
	cq := ConversationQuality{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, entID).Scan(&cq.EntID, &cq.Grade, &cq.VisitorMsgCount, &cq.AgentMsgCount, &cq.Status)
	if err != nil {
		return nil, err
	}

	return &cq, nil
}
