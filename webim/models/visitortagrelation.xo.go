// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

// VisitorTagRelation represents a row from 'custmchat.visitor_tag_relation'.
type VisitorTagRelation struct {
	VisitorID string `json:"visitor_id"` // visitor_id
	TagID     string `json:"tag_id"`     // tag_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the VisitorTagRelation exists in the database.
func (vtr *VisitorTagRelation) Exists() bool {
	return vtr._exists
}

// Deleted provides information if the VisitorTagRelation has been deleted from the database.
func (vtr *VisitorTagRelation) Deleted() bool {
	return vtr._deleted
}

// Insert inserts the VisitorTagRelation to the database.
func (vtr *VisitorTagRelation) Insert(db XODB) error {
	var err error

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.visitor_tag_relation (` +
		`visitor_id, tag_id` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, vtr.VisitorID, vtr.TagID)
	_, err = db.Exec(sqlstr, vtr.VisitorID, vtr.TagID)
	if err != nil {
		return err
	}

	return nil
}

// Update statements omitted due to lack of fields other than primary key

// Delete deletes the VisitorTagRelation from the database.
func (vtr *VisitorTagRelation) Delete(db XODB) error {
	var err error

	// sql query with composite primary key
	const sqlstr = `DELETE FROM custmchat.visitor_tag_relation WHERE visitor_id = ? AND tag_id = ?`

	// run query
	XOLog(sqlstr, vtr.VisitorID, vtr.TagID)
	_, err = db.Exec(sqlstr, vtr.VisitorID, vtr.TagID)
	if err != nil {
		return err
	}

	return nil
}

// VisitorTagRelationByVisitorIDTagID retrieves a row from 'custmchat.visitor_tag_relation' as a VisitorTagRelation.
//
// Generated from index 'visitor_id'.
func VisitorTagRelationByVisitorIDTagID(db XODB, visitorID string, tagID string) (*VisitorTagRelation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`visitor_id, tag_id ` +
		`FROM custmchat.visitor_tag_relation ` +
		`WHERE visitor_id = ? AND tag_id = ?`

	// run query
	XOLog(sqlstr, visitorID, tagID)
	vtr := VisitorTagRelation{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, visitorID, tagID).Scan(&vtr.VisitorID, &vtr.TagID)
	if err != nil {
		return nil, err
	}

	return &vtr, nil
}

// VisitorTagRelationByTagID retrieves a row from 'custmchat.visitor_tag_relation' as a VisitorTagRelation.
//
// Generated from index 'visitor_tag_relation_tag_id_pkey'.
func VisitorTagRelationByTagID(db XODB, tagID string) (*VisitorTagRelation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`visitor_id, tag_id ` +
		`FROM custmchat.visitor_tag_relation ` +
		`WHERE tag_id = ?`

	// run query
	XOLog(sqlstr, tagID)
	vtr := VisitorTagRelation{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, tagID).Scan(&vtr.VisitorID, &vtr.TagID)
	if err != nil {
		return nil, err
	}

	return &vtr, nil
}
