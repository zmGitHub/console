// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"time"

	"bitbucket.org/forfd/custm-chat/webim/conf"
)

// OnlineAgent represents a row from 'custmchat.online_agents'.
type OnlineAgent struct {
	EntID       string    `json:"ent_id"`       // end_id
	AgentID     string    `json:"agent_id"`     // agent_id
	OnlineCount int       `json:"online_count"` // online_count
	UpdatedAt   time.Time `json:"updated_at"`   // updated_at
}

// OnlineAgentsByAgentID retrieves a row from 'custmchat.online_agents' as a OnlineAgent.
//
// Generated from index 'idx_agent'.
func OnlineAgentsByAgentID(db XODB, agentID string) ([]*OnlineAgent, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ent_id, agent_id, online_count, updated_at ` +
		`FROM custmchat.online_agents ` +
		`WHERE agent_id = ?`

	// run query
	XOLog(sqlstr, agentID)
	q, err := db.Query(sqlstr, agentID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*OnlineAgent{}
	for q.Next() {
		oa := OnlineAgent{}

		// scan
		err = q.Scan(&oa.EntID, &oa.AgentID, &oa.OnlineCount, &oa.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &oa)
	}

	return res, nil
}

func OnlineAgentsByEntID(db XODB, entID string) (agents []*OnlineAgent, err error) {
	// sql query
	const sqlstr = `SELECT ` +
		`ent_id, agent_id, online_count, updated_at ` +
		`FROM custmchat.online_agents ` +
		`WHERE ent_id = ? AND updated_at >= ?`

	now := time.Now().UTC()
	pingDuration := defaultPingDuration
	d := conf.IMConf.CentrifugoConf.PingInterval.Duration
	if d >= conf.MinPingInterval && d <= conf.MaxPingInterval {
		pingDuration = d
	}

	start := now.Add(-1 * pingDuration)
	q, err := db.Query(sqlstr, entID, start)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	for q.Next() {
		oa := &OnlineAgent{}

		err = q.Scan(&oa.EntID, &oa.AgentID, &oa.OnlineCount, &oa.UpdatedAt)
		if err != nil {
			return nil, err
		}
		agents = append(agents, oa)
	}
	if err = q.Err(); err != nil {
		return
	}

	return
}

func IsAgentOnline(db XODB, entID, agentID string) (bool, error) {
	now := time.Now().UTC()
	pingDuration := defaultPingDuration
	d := conf.IMConf.CentrifugoConf.PingInterval.Duration
	if d >= conf.MinPingInterval && d <= conf.MaxPingInterval {
		pingDuration = d
	}

	var result string
	start := now.Add(-1 * pingDuration)
	query := `SELECT agent_id FROM custmchat.online_agents WHERE ent_id = ? AND agent_id=? AND updated_at >= ?`
	if err := db.QueryRow(query, entID, agentID, start).Scan(&result); err != nil {
		if err == sql.ErrNoRows {
			return false, nil
		}

		return false, err
	}

	return result == agentID, nil
}
