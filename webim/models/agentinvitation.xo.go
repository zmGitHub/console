// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// AgentInvitation represents a row from 'custmchat.agent_invitation'.
type AgentInvitation struct {
	ID             string         `json:"id"`              // id
	EnterpriseID   string         `json:"enterprise_id"`   // enterprise_id
	GroupID        string         `json:"group_id"`        // group_id
	Email          string         `json:"email"`           // email
	Realname       string         `json:"realname"`        // realname
	ServingLimit   int            `json:"serving_limit"`   // serving_limit
	Status         string         `json:"status"`          // status
	WorkNum        string         `json:"work_num"`        // work_num
	Privilege      string         `json:"privilege"`       // privilege
	PrivilegeRange string         `json:"privilege_range"` // privilege_range
	CreatedOn      time.Time      `json:"created_on"`      // created_on
	LastUpdated    time.Time      `json:"last_updated"`    // last_updated
	ExpiredOn      time.Time      `json:"expired_on"`      // expired_on
	AcceptedOn     mysql.NullTime `json:"accepted_on"`     // accepted_on

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AgentInvitation exists in the database.
func (ai *AgentInvitation) Exists() bool {
	return ai._exists
}

// Deleted provides information if the AgentInvitation has been deleted from the database.
func (ai *AgentInvitation) Deleted() bool {
	return ai._deleted
}

// Insert inserts the AgentInvitation to the database.
func (ai *AgentInvitation) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ai._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.agent_invitation (` +
		`id, enterprise_id, group_id, email, realname, serving_limit, status, work_num, privilege, privilege_range, created_on, last_updated, expired_on, accepted_on` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ai.ID, ai.EnterpriseID, ai.GroupID, ai.Email, ai.Realname, ai.ServingLimit, ai.Status, ai.WorkNum, ai.Privilege, ai.PrivilegeRange, ai.CreatedOn, ai.LastUpdated, ai.ExpiredOn, ai.AcceptedOn)
	_, err = db.Exec(sqlstr, ai.ID, ai.EnterpriseID, ai.GroupID, ai.Email, ai.Realname, ai.ServingLimit, ai.Status, ai.WorkNum, ai.Privilege, ai.PrivilegeRange, ai.CreatedOn, ai.LastUpdated, ai.ExpiredOn, ai.AcceptedOn)
	if err != nil {
		return err
	}

	// set existence
	ai._exists = true

	return nil
}

// Update updates the AgentInvitation in the database.
func (ai *AgentInvitation) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ai._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ai._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE custmchat.agent_invitation SET ` +
		`enterprise_id = ?, group_id = ?, email = ?, realname = ?, serving_limit = ?, status = ?, work_num = ?, privilege = ?, privilege_range = ?, created_on = ?, last_updated = ?, expired_on = ?, accepted_on = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ai.EnterpriseID, ai.GroupID, ai.Email, ai.Realname, ai.ServingLimit, ai.Status, ai.WorkNum, ai.Privilege, ai.PrivilegeRange, ai.CreatedOn, ai.LastUpdated, ai.ExpiredOn, ai.AcceptedOn, ai.ID)
	_, err = db.Exec(sqlstr, ai.EnterpriseID, ai.GroupID, ai.Email, ai.Realname, ai.ServingLimit, ai.Status, ai.WorkNum, ai.Privilege, ai.PrivilegeRange, ai.CreatedOn, ai.LastUpdated, ai.ExpiredOn, ai.AcceptedOn, ai.ID)
	return err
}

// Save saves the AgentInvitation to the database.
func (ai *AgentInvitation) Save(db XODB) error {
	if ai.Exists() {
		return ai.Update(db)
	}

	return ai.Insert(db)
}

// Delete deletes the AgentInvitation from the database.
func (ai *AgentInvitation) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ai._exists {
		return nil
	}

	// if deleted, bail
	if ai._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM custmchat.agent_invitation WHERE id = ?`

	// run query
	XOLog(sqlstr, ai.ID)
	_, err = db.Exec(sqlstr, ai.ID)
	if err != nil {
		return err
	}

	// set deleted
	ai._deleted = true

	return nil
}

// AgentInvitationByID retrieves a row from 'custmchat.agent_invitation' as a AgentInvitation.
//
// Generated from index 'agent_invitation_id_pkey'.
func AgentInvitationByID(db XODB, id string) (*AgentInvitation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, enterprise_id, group_id, email, realname, serving_limit, status, work_num, privilege, privilege_range, created_on, last_updated, expired_on, accepted_on ` +
		`FROM custmchat.agent_invitation ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ai := AgentInvitation{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ai.ID, &ai.EnterpriseID, &ai.GroupID, &ai.Email, &ai.Realname, &ai.ServingLimit, &ai.Status, &ai.WorkNum, &ai.Privilege, &ai.PrivilegeRange, &ai.CreatedOn, &ai.LastUpdated, &ai.ExpiredOn, &ai.AcceptedOn)
	if err != nil {
		return nil, err
	}

	return &ai, nil
}

// AgentInvitationsByEnterpriseID retrieves a row from 'custmchat.agent_invitation' as a AgentInvitation.
//
// Generated from index 'idx_enterprise'.
func AgentInvitationsByEnterpriseID(db XODB, enterpriseID string) ([]*AgentInvitation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, enterprise_id, group_id, email, realname, serving_limit, status, work_num, privilege, privilege_range, created_on, last_updated, expired_on, accepted_on ` +
		`FROM custmchat.agent_invitation ` +
		`WHERE enterprise_id = ? AND status = ?`

	// run query
	XOLog(sqlstr, enterpriseID)
	q, err := db.Query(sqlstr, enterpriseID, AgentInvitationPendingStatus)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*AgentInvitation{}
	for q.Next() {
		ai := AgentInvitation{
			_exists: true,
		}

		// scan
		err = q.Scan(&ai.ID, &ai.EnterpriseID, &ai.GroupID, &ai.Email, &ai.Realname, &ai.ServingLimit, &ai.Status, &ai.WorkNum, &ai.Privilege, &ai.PrivilegeRange, &ai.CreatedOn, &ai.LastUpdated, &ai.ExpiredOn, &ai.AcceptedOn)
		if err != nil {
			return nil, err
		}

		res = append(res, &ai)
	}

	return res, nil
}
