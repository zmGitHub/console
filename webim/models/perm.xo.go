// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Perm represents a row from 'custmchat.perm'.
type Perm struct {
	ID        string    `json:"id"`         // id
	EntID     string    `json:"ent_id"`     // ent_id
	AppName   string    `json:"app_name"`   // app_name
	Name      string    `json:"name"`       // name
	CreatedAt time.Time `json:"created_at"` // created_at
	UpdatedAt time.Time `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Perm exists in the database.
func (p *Perm) Exists() bool {
	return p._exists
}

// Deleted provides information if the Perm has been deleted from the database.
func (p *Perm) Deleted() bool {
	return p._deleted
}

// Insert inserts the Perm to the database.
func (p *Perm) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.perm (` +
		`id, ent_id, app_name, name, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, p.ID, p.EntID, p.AppName, p.Name, p.CreatedAt, p.UpdatedAt)
	_, err = db.Exec(sqlstr, p.ID, p.EntID, p.AppName, p.Name, p.CreatedAt, p.UpdatedAt)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Update updates the Perm in the database.
func (p *Perm) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE custmchat.perm SET ` +
		`ent_id = ?, app_name = ?, name = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, p.EntID, p.AppName, p.Name, p.CreatedAt, p.UpdatedAt, p.ID)
	_, err = db.Exec(sqlstr, p.EntID, p.AppName, p.Name, p.CreatedAt, p.UpdatedAt, p.ID)
	return err
}

// Save saves the Perm to the database.
func (p *Perm) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Delete deletes the Perm from the database.
func (p *Perm) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM custmchat.perm WHERE id = ?`

	// run query
	XOLog(sqlstr, p.ID)
	_, err = db.Exec(sqlstr, p.ID)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

func PermsByEntID(db XODB, entID string) ([]*Perm, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, app_name, name, created_at, updated_at ` +
		`FROM custmchat.perm ` +
		`WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, entID)

	// Scan(&p.ID, &p.EntID, &p.AppName, &p.Name, &p.CreatedAt, &p.UpdatedAt)
	rows, err := db.Query(sqlstr, entID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var res []*Perm
	for rows.Next() {
		p := Perm{}
		if err = rows.Scan(&p.ID, &p.EntID, &p.AppName, &p.Name, &p.CreatedAt, &p.UpdatedAt); err != nil {
			return nil, err
		}

		res = append(res, &p)
	}
	if err = rows.Err(); err != nil {
		return nil, err
	}

	return res, nil
}

// PermByID retrieves a row from 'custmchat.perm' as a Perm.
//
// Generated from index 'perm_id_pkey'.
func PermByID(db XODB, id string) (*Perm, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, app_name, name, created_at, updated_at ` +
		`FROM custmchat.perm ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	p := Perm{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&p.ID, &p.EntID, &p.AppName, &p.Name, &p.CreatedAt, &p.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
