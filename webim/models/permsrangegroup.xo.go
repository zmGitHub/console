// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// PermsRangeGroup represents a row from 'custmchat.perms_range_groups'.
type PermsRangeGroup struct {
	AgentID string `json:"agent_id"` // agent_id
	GroupID string `json:"group_id"` // group_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PermsRangeGroup exists in the database.
func (prg *PermsRangeGroup) Exists() bool {
	return prg._exists
}

// Deleted provides information if the PermsRangeGroup has been deleted from the database.
func (prg *PermsRangeGroup) Deleted() bool {
	return prg._deleted
}

// Insert inserts the PermsRangeGroup to the database.
func (prg *PermsRangeGroup) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if prg._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.perms_range_groups (` +
		`agent_id, group_id` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, prg.AgentID, prg.GroupID)
	_, err = db.Exec(sqlstr, prg.AgentID, prg.GroupID)
	if err != nil {
		return err
	}

	// set existence
	prg._exists = true

	return nil
}

// Update statements omitted due to lack of fields other than primary key

// Delete deletes the PermsRangeGroup from the database.
func (prg *PermsRangeGroup) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !prg._exists {
		return nil
	}

	// if deleted, bail
	if prg._deleted {
		return nil
	}

	// sql query with composite primary key
	const sqlstr = `DELETE FROM custmchat.perms_range_groups WHERE agent_id = ? AND group_id = ?`

	// run query
	XOLog(sqlstr, prg.AgentID, prg.GroupID)
	_, err = db.Exec(sqlstr, prg.AgentID, prg.GroupID)
	if err != nil {
		return err
	}

	// set deleted
	prg._deleted = true

	return nil
}

// PermsRangeGroupByAgentIDGroupID retrieves a row from 'custmchat.perms_range_groups' as a PermsRangeGroup.
//
// Generated from index 'agent_id'.
func PermsRangeGroupByAgentIDGroupID(db XODB, agentID string, groupID string) (*PermsRangeGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`agent_id, group_id ` +
		`FROM custmchat.perms_range_groups ` +
		`WHERE agent_id = ? AND group_id = ?`

	// run query
	XOLog(sqlstr, agentID, groupID)
	prg := PermsRangeGroup{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, agentID, groupID).Scan(&prg.AgentID, &prg.GroupID)
	if err != nil {
		return nil, err
	}

	return &prg, nil
}

func PermsRangeGroupByGroupID(db XODB, groupID string) (*PermsRangeGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`agent_id, group_id ` +
		`FROM custmchat.perms_range_groups ` +
		`WHERE group_id = ?`

	// run query
	XOLog(sqlstr, groupID)
	prg := PermsRangeGroup{}

	err = db.QueryRow(sqlstr, groupID).Scan(&prg.AgentID, &prg.GroupID)
	if err != nil {
		return nil, err
	}

	return &prg, nil
}
