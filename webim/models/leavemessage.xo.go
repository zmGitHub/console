// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"time"
)

// LeaveMessage represents a row from 'custmchat.leave_message'.
type LeaveMessage struct {
	ID              string         `json:"id"`                // id
	EntID           string         `json:"ent_id"`            // ent_id
	TrackID         string         `json:"track_id"`          // track_id
	LastOptionAgent sql.NullString `json:"last_option_agent"` // last_option_agent
	Mobile          string         `json:"mobile"`            // mobile
	Content         string         `json:"content"`           // content
	Status          string         `json:"status"`            // status
	CreatedAt       time.Time      `json:"created_at"`        // created_at
	UpdatedAt       time.Time      `json:"updated_at"`        // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the LeaveMessage exists in the database.
func (lm *LeaveMessage) Exists() bool {
	return lm._exists
}

// Deleted provides information if the LeaveMessage has been deleted from the database.
func (lm *LeaveMessage) Deleted() bool {
	return lm._deleted
}

// Insert inserts the LeaveMessage to the database.
func (lm *LeaveMessage) Insert(db XODB) error {
	var err error

	// sql insert query, primary key must be provided
	sqlstr := `INSERT INTO custmchat.leave_message (` +
		LeaveMessageFields +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	_, err = db.Exec(sqlstr, lm.ID, lm.EntID, lm.TrackID, lm.LastOptionAgent, lm.Mobile, lm.Content, lm.Status, lm.CreatedAt, lm.UpdatedAt)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the LeaveMessage in the database.
func (lm *LeaveMessage) Update(db XODB) error {
	var err error

	// sql query
	const sqlstr = `UPDATE custmchat.leave_message SET ` +
		`ent_id = ?, last_option_agent=?, mobile=?, content = ?, status = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	_, err = db.Exec(sqlstr, lm.EntID, lm.LastOptionAgent, lm.Mobile, lm.Content, lm.Status, lm.CreatedAt, lm.UpdatedAt, lm.ID)
	return err
}

// Save saves the LeaveMessage to the database.
func (lm *LeaveMessage) Save(db XODB) error {
	if lm.Exists() {
		return lm.Update(db)
	}

	return lm.Insert(db)
}

// Delete deletes the LeaveMessage from the database.
func (lm *LeaveMessage) Delete(db XODB) error {
	var err error

	// sql query
	const sqlstr = `DELETE FROM custmchat.leave_message WHERE id = ?`

	// run query
	XOLog(sqlstr, lm.ID)
	_, err = db.Exec(sqlstr, lm.ID)
	if err != nil {
		return err
	}

	return nil
}

// LeaveMessagesByEntID retrieves a row from 'custmchat.leave_message' as a LeaveMessage.
//
// Generated from index 'ent_id'.
func LeaveMessagesByEntID(db XODB, entID string, offset, limit int) ([]*LeaveMessage, error) {
	var err error

	// sql query
	sqlstr := `SELECT ` + LeaveMessageFields +
		` FROM custmchat.leave_message ` +
		`WHERE ent_id = ? ` +
		`LIMIT ?,?`

	// run query
	q, err := db.Query(sqlstr, entID, offset, limit)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	var res []*LeaveMessage
	for q.Next() {
		lm := LeaveMessage{}

		err = q.Scan(&lm.ID, &lm.EntID, &lm.TrackID, &lm.LastOptionAgent, &lm.Mobile, &lm.Content, &lm.Status, &lm.CreatedAt, &lm.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &lm)
	}

	return res, nil
}

// LeaveMessageByID retrieves a row from 'custmchat.leave_message' as a LeaveMessage.
//
// Generated from index 'leave_message_id_pkey'.
func LeaveMessageByID(db XODB, id string) (*LeaveMessage, error) {
	var err error

	// sql query
	sqlstr := `SELECT ` +
		LeaveMessageFields +
		` FROM custmchat.leave_message ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	lm := LeaveMessage{}

	err = db.QueryRow(sqlstr, id).Scan(&lm.ID, &lm.EntID, &lm.TrackID, &lm.LastOptionAgent, &lm.Mobile, &lm.Content, &lm.Status, &lm.CreatedAt, &lm.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &lm, nil
}
