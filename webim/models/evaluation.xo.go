// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Evaluation represents a row from 'custmchat.evaluation'.
type Evaluation struct {
	EntID     string    `json:"ent_id"`     // ent_id
	AgentID   string    `json:"agent_id"`   // agent_id
	ConvID    string    `json:"conv_id"`    // conv_id
	Level     int8      `json:"level"`      // level
	Content   string    `json:"content"`    // content
	CreatedAt time.Time `json:"created_at"` // created_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Evaluation exists in the database.
func (e *Evaluation) Exists() bool {
	return e._exists
}

// Deleted provides information if the Evaluation has been deleted from the database.
func (e *Evaluation) Deleted() bool {
	return e._deleted
}

// Insert inserts the Evaluation to the database.
func (e *Evaluation) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if e._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.evaluation (` +
		`ent_id, agent_id, conv_id, level, content, created_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, e.EntID, e.AgentID, e.ConvID, e.Level, e.Content, e.CreatedAt)
	_, err = db.Exec(sqlstr, e.EntID, e.AgentID, e.ConvID, e.Level, e.Content, e.CreatedAt)
	if err != nil {
		return err
	}

	// set existence
	e._exists = true

	return nil
}

// Update updates the Evaluation in the database.
func (e *Evaluation) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if e._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE custmchat.evaluation SET ` +
		`ent_id = ?, agent_id = ?, level = ?, content = ?, created_at = ?` +
		` WHERE conv_id = ?`

	// run query
	XOLog(sqlstr, e.EntID, e.AgentID, e.Level, e.Content, e.CreatedAt, e.ConvID)
	_, err = db.Exec(sqlstr, e.EntID, e.AgentID, e.Level, e.Content, e.CreatedAt, e.ConvID)
	return err
}

// Save saves the Evaluation to the database.
func (e *Evaluation) Save(db XODB) error {
	if e.Exists() {
		return e.Update(db)
	}

	return e.Insert(db)
}

// Delete deletes the Evaluation from the database.
func (e *Evaluation) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return nil
	}

	// if deleted, bail
	if e._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM custmchat.evaluation WHERE conv_id = ?`

	// run query
	XOLog(sqlstr, e.ConvID)
	_, err = db.Exec(sqlstr, e.ConvID)
	if err != nil {
		return err
	}

	// set deleted
	e._deleted = true

	return nil
}

// EvaluationByConvID retrieves a row from 'custmchat.evaluation' as a Evaluation.
//
// Generated from index 'conv_id'.
func EvaluationByConvID(db XODB, convID string) (*Evaluation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ent_id, agent_id, conv_id, level, content, created_at ` +
		`FROM custmchat.evaluation ` +
		`WHERE conv_id = ?`

	// run query
	XOLog(sqlstr, convID)
	e := Evaluation{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, convID).Scan(&e.EntID, &e.AgentID, &e.ConvID, &e.Level, &e.Content, &e.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &e, nil
}

// EvaluationsByAgentID retrieves a row from 'custmchat.evaluation' as a Evaluation.
//
// Generated from index 'idx_agent'.
func EvaluationsByAgentID(db XODB, agentID string) ([]*Evaluation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ent_id, agent_id, conv_id, level, content, created_at ` +
		`FROM custmchat.evaluation ` +
		`WHERE agent_id = ?`

	// run query
	XOLog(sqlstr, agentID)
	q, err := db.Query(sqlstr, agentID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Evaluation{}
	for q.Next() {
		e := Evaluation{
			_exists: true,
		}

		// scan
		err = q.Scan(&e.EntID, &e.AgentID, &e.ConvID, &e.Level, &e.Content, &e.CreatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &e)
	}

	return res, nil
}

// EvaluationsByEntID retrieves a row from 'custmchat.evaluation' as a Evaluation.
//
// Generated from index 'idx_ent'.
func EvaluationsByEntID(db XODB, entID string) ([]*Evaluation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ent_id, agent_id, conv_id, level, content, created_at ` +
		`FROM custmchat.evaluation ` +
		`WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, entID)
	q, err := db.Query(sqlstr, entID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Evaluation{}
	for q.Next() {
		e := Evaluation{
			_exists: true,
		}

		// scan
		err = q.Scan(&e.EntID, &e.AgentID, &e.ConvID, &e.Level, &e.Content, &e.CreatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &e)
	}

	return res, nil
}
