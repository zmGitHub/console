// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Member represents a row from 'custmchat.member'.
type Member struct {
	ID        string    `json:"id"`         // id
	UID       string    `json:"uid"`        // uid
	EntID     string    `json:"ent_id"`     // ent_id
	Role      string    `json:"role"`       // role
	Enabled   bool      `json:"enabled"`    // enabled
	Profile   string    `json:"profile"`    // profile
	CreatedAt time.Time `json:"created_at"` // created_at
	UpdatedAt time.Time `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Member exists in the database.
func (m *Member) Exists() bool {
	return m._exists
}

// Deleted provides information if the Member has been deleted from the database.
func (m *Member) Deleted() bool {
	return m._deleted
}

// Insert inserts the Member to the database.
func (m *Member) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.member (` +
		`id, uid, ent_id, role, enabled, profile, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, m.ID, m.UID, m.EntID, m.Role, m.Enabled, m.Profile, m.CreatedAt, m.UpdatedAt)
	_, err = db.Exec(sqlstr, m.ID, m.UID, m.EntID, m.Role, m.Enabled, m.Profile, m.CreatedAt, m.UpdatedAt)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Update updates the Member in the database.
func (m *Member) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if m._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE custmchat.member SET ` +
		`uid = ?, ent_id = ?, role = ?, enabled = ?, profile = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, m.UID, m.EntID, m.Role, m.Enabled, m.Profile, m.CreatedAt, m.UpdatedAt, m.ID)
	_, err = db.Exec(sqlstr, m.UID, m.EntID, m.Role, m.Enabled, m.Profile, m.CreatedAt, m.UpdatedAt, m.ID)
	return err
}

// Save saves the Member to the database.
func (m *Member) Save(db XODB) error {
	if m.Exists() {
		return m.Update(db)
	}

	return m.Insert(db)
}

// Delete deletes the Member from the database.
func (m *Member) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return nil
	}

	// if deleted, bail
	if m._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM custmchat.member WHERE id = ?`

	// run query
	XOLog(sqlstr, m.ID)
	_, err = db.Exec(sqlstr, m.ID)
	if err != nil {
		return err
	}

	// set deleted
	m._deleted = true

	return nil
}

// MembersByEntIDRole retrieves a row from 'custmchat.member' as a Member.
//
// Generated from index 'ent_id'.
func MembersByEntIDRole(db XODB, entID string, role string) ([]*Member, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, uid, ent_id, role, enabled, profile, created_at, updated_at ` +
		`FROM custmchat.member ` +
		`WHERE ent_id = ? AND role = ?`

	// run query
	XOLog(sqlstr, entID, role)
	q, err := db.Query(sqlstr, entID, role)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Member{}
	for q.Next() {
		m := Member{
			_exists: true,
		}

		// scan
		err = q.Scan(&m.ID, &m.UID, &m.EntID, &m.Role, &m.Enabled, &m.Profile, &m.CreatedAt, &m.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &m)
	}

	return res, nil
}

// MemberByID retrieves a row from 'custmchat.member' as a Member.
//
// Generated from index 'member_id_pkey'.
func MemberByID(db XODB, id string) (*Member, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, uid, ent_id, role, enabled, profile, created_at, updated_at ` +
		`FROM custmchat.member ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	m := Member{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&m.ID, &m.UID, &m.EntID, &m.Role, &m.Enabled, &m.Profile, &m.CreatedAt, &m.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &m, nil
}

// MemberByUIDEntID retrieves a row from 'custmchat.member' as a Member.
//
// Generated from index 'uid'.
func MemberByUIDEntID(db XODB, uid string, entID string) (*Member, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, uid, ent_id, role, enabled, profile, created_at, updated_at ` +
		`FROM custmchat.member ` +
		`WHERE uid = ? AND ent_id = ?`

	// run query
	XOLog(sqlstr, uid, entID)
	m := Member{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, uid, entID).Scan(&m.ID, &m.UID, &m.EntID, &m.Role, &m.Enabled, &m.Profile, &m.CreatedAt, &m.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &m, nil
}
