// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// InvitationLog represents a row from 'custmchat.invitation_logs'.
type InvitationLog struct {
	ID              string         `json:"id"`                // id
	EntID           string         `json:"ent_id"`            // ent_id
	TraceID         string         `json:"trace_id"`          // trace_id
	LookID          string         `json:"look_id"`           // look_id
	LookConfigIndex int            `json:"look_config_index"` // look_config_index
	MechID          string         `json:"mech_id"`           // mech_id
	MechConfigIndex int            `json:"mech_config_index"` // mech_config_index
	IsAccepted      bool           `json:"is_accepted"`       // is_accepted
	ConversationID  sql.NullString `json:"conversation_id"`   // conversation_id
	CreatedAt       time.Time      `json:"created_at"`        // created_at
	UpdatedAt       time.Time      `json:"updated_at"`        // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the InvitationLog exists in the database.
func (il *InvitationLog) Exists() bool {
	return il._exists
}

// Deleted provides information if the InvitationLog has been deleted from the database.
func (il *InvitationLog) Deleted() bool {
	return il._deleted
}

// Insert inserts the InvitationLog to the database.
func (il *InvitationLog) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if il._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.invitation_logs (` +
		`id, ent_id, trace_id, look_id, look_config_index, mech_id, mech_config_index, is_accepted, conversation_id, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, il.ID, il.EntID, il.TraceID, il.LookID, il.LookConfigIndex, il.MechID, il.MechConfigIndex, il.IsAccepted, il.ConversationID, il.CreatedAt, il.UpdatedAt)
	_, err = db.Exec(sqlstr, il.ID, il.EntID, il.TraceID, il.LookID, il.LookConfigIndex, il.MechID, il.MechConfigIndex, il.IsAccepted, il.ConversationID, il.CreatedAt, il.UpdatedAt)
	if err != nil {
		return err
	}

	// set existence
	il._exists = true

	return nil
}

// Update updates the InvitationLog in the database.
func (il *InvitationLog) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !il._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if il._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE custmchat.invitation_logs SET ` +
		`ent_id = ?, trace_id = ?, look_id = ?, look_config_index = ?, mech_id = ?, mech_config_index = ?, is_accepted = ?, conversation_id = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, il.EntID, il.TraceID, il.LookID, il.LookConfigIndex, il.MechID, il.MechConfigIndex, il.IsAccepted, il.ConversationID, il.CreatedAt, il.UpdatedAt, il.ID)
	_, err = db.Exec(sqlstr, il.EntID, il.TraceID, il.LookID, il.LookConfigIndex, il.MechID, il.MechConfigIndex, il.IsAccepted, il.ConversationID, il.CreatedAt, il.UpdatedAt, il.ID)
	return err
}

// Save saves the InvitationLog to the database.
func (il *InvitationLog) Save(db XODB) error {
	if il.Exists() {
		return il.Update(db)
	}

	return il.Insert(db)
}

// Delete deletes the InvitationLog from the database.
func (il *InvitationLog) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !il._exists {
		return nil
	}

	// if deleted, bail
	if il._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM custmchat.invitation_logs WHERE id = ?`

	// run query
	XOLog(sqlstr, il.ID)
	_, err = db.Exec(sqlstr, il.ID)
	if err != nil {
		return err
	}

	// set deleted
	il._deleted = true

	return nil
}

// InvitationLogsByEntIDCreatedAt retrieves a row from 'custmchat.invitation_logs' as a InvitationLog.
//
// Generated from index 'idx_ent_id_created_at'.
func InvitationLogsByEntIDCreatedAt(db XODB, entID string, createdAt time.Time) ([]*InvitationLog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, trace_id, look_id, look_config_index, mech_id, mech_config_index, is_accepted, conversation_id, created_at, updated_at ` +
		`FROM custmchat.invitation_logs ` +
		`WHERE ent_id = ? AND created_at = ?`

	// run query
	XOLog(sqlstr, entID, createdAt)
	q, err := db.Query(sqlstr, entID, createdAt)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*InvitationLog{}
	for q.Next() {
		il := InvitationLog{
			_exists: true,
		}

		// scan
		err = q.Scan(&il.ID, &il.EntID, &il.TraceID, &il.LookID, &il.LookConfigIndex, &il.MechID, &il.MechConfigIndex, &il.IsAccepted, &il.ConversationID, &il.CreatedAt, &il.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &il)
	}

	return res, nil
}

// InvitationLogsByEntIDLookIDLookConfigIndexCreatedAt retrieves a row from 'custmchat.invitation_logs' as a InvitationLog.
//
// Generated from index 'idx_ent_id_look_id_config_index_created_at'.
func InvitationLogsByEntIDLookIDLookConfigIndexCreatedAt(db XODB, entID string, lookID string, lookConfigIndex int, createdAt time.Time) ([]*InvitationLog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, trace_id, look_id, look_config_index, mech_id, mech_config_index, is_accepted, conversation_id, created_at, updated_at ` +
		`FROM custmchat.invitation_logs ` +
		`WHERE ent_id = ? AND look_id = ? AND look_config_index = ? AND created_at = ?`

	// run query
	XOLog(sqlstr, entID, lookID, lookConfigIndex, createdAt)
	q, err := db.Query(sqlstr, entID, lookID, lookConfigIndex, createdAt)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*InvitationLog{}
	for q.Next() {
		il := InvitationLog{
			_exists: true,
		}

		// scan
		err = q.Scan(&il.ID, &il.EntID, &il.TraceID, &il.LookID, &il.LookConfigIndex, &il.MechID, &il.MechConfigIndex, &il.IsAccepted, &il.ConversationID, &il.CreatedAt, &il.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &il)
	}

	return res, nil
}

// InvitationLogsByEntIDLookIDCreatedAt retrieves a row from 'custmchat.invitation_logs' as a InvitationLog.
//
// Generated from index 'idx_ent_id_look_id_created_at'.
func InvitationLogsByEntIDLookIDCreatedAt(db XODB, entID string, lookID string, createdAt time.Time) ([]*InvitationLog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, trace_id, look_id, look_config_index, mech_id, mech_config_index, is_accepted, conversation_id, created_at, updated_at ` +
		`FROM custmchat.invitation_logs ` +
		`WHERE ent_id = ? AND look_id = ? AND created_at = ?`

	// run query
	XOLog(sqlstr, entID, lookID, createdAt)
	q, err := db.Query(sqlstr, entID, lookID, createdAt)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*InvitationLog{}
	for q.Next() {
		il := InvitationLog{
			_exists: true,
		}

		// scan
		err = q.Scan(&il.ID, &il.EntID, &il.TraceID, &il.LookID, &il.LookConfigIndex, &il.MechID, &il.MechConfigIndex, &il.IsAccepted, &il.ConversationID, &il.CreatedAt, &il.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &il)
	}

	return res, nil
}

// InvitationLogsByEntIDMechIDMechConfigIndexCreatedAt retrieves a row from 'custmchat.invitation_logs' as a InvitationLog.
//
// Generated from index 'idx_ent_id_mech_id_config_index_created_at'.
func InvitationLogsByEntIDMechIDMechConfigIndexCreatedAt(db XODB, entID string, mechID string, mechConfigIndex int, createdAt time.Time) ([]*InvitationLog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, trace_id, look_id, look_config_index, mech_id, mech_config_index, is_accepted, conversation_id, created_at, updated_at ` +
		`FROM custmchat.invitation_logs ` +
		`WHERE ent_id = ? AND mech_id = ? AND mech_config_index = ? AND created_at = ?`

	// run query
	XOLog(sqlstr, entID, mechID, mechConfigIndex, createdAt)
	q, err := db.Query(sqlstr, entID, mechID, mechConfigIndex, createdAt)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*InvitationLog{}
	for q.Next() {
		il := InvitationLog{
			_exists: true,
		}

		// scan
		err = q.Scan(&il.ID, &il.EntID, &il.TraceID, &il.LookID, &il.LookConfigIndex, &il.MechID, &il.MechConfigIndex, &il.IsAccepted, &il.ConversationID, &il.CreatedAt, &il.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &il)
	}

	return res, nil
}

// InvitationLogsByEntIDMechIDCreatedAt retrieves a row from 'custmchat.invitation_logs' as a InvitationLog.
//
// Generated from index 'idx_ent_id_mech_id_created_at'.
func InvitationLogsByEntIDMechIDCreatedAt(db XODB, entID string, mechID string, createdAt time.Time) ([]*InvitationLog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, trace_id, look_id, look_config_index, mech_id, mech_config_index, is_accepted, conversation_id, created_at, updated_at ` +
		`FROM custmchat.invitation_logs ` +
		`WHERE ent_id = ? AND mech_id = ? AND created_at = ?`

	// run query
	XOLog(sqlstr, entID, mechID, createdAt)
	q, err := db.Query(sqlstr, entID, mechID, createdAt)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*InvitationLog{}
	for q.Next() {
		il := InvitationLog{
			_exists: true,
		}

		// scan
		err = q.Scan(&il.ID, &il.EntID, &il.TraceID, &il.LookID, &il.LookConfigIndex, &il.MechID, &il.MechConfigIndex, &il.IsAccepted, &il.ConversationID, &il.CreatedAt, &il.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &il)
	}

	return res, nil
}

// InvitationLogsByEntIDTraceIDCreatedAt retrieves a row from 'custmchat.invitation_logs' as a InvitationLog.
//
// Generated from index 'idx_ent_id_trace_id_created_at'.
func InvitationLogsByEntIDTraceIDCreatedAt(db XODB, entID string, traceID string, createdAt time.Time) ([]*InvitationLog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, trace_id, look_id, look_config_index, mech_id, mech_config_index, is_accepted, conversation_id, created_at, updated_at ` +
		`FROM custmchat.invitation_logs ` +
		`WHERE ent_id = ? AND trace_id = ? AND created_at = ?`

	// run query
	XOLog(sqlstr, entID, traceID, createdAt)
	q, err := db.Query(sqlstr, entID, traceID, createdAt)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*InvitationLog{}
	for q.Next() {
		il := InvitationLog{
			_exists: true,
		}

		// scan
		err = q.Scan(&il.ID, &il.EntID, &il.TraceID, &il.LookID, &il.LookConfigIndex, &il.MechID, &il.MechConfigIndex, &il.IsAccepted, &il.ConversationID, &il.CreatedAt, &il.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &il)
	}

	return res, nil
}

// InvitationLogByID retrieves a row from 'custmchat.invitation_logs' as a InvitationLog.
//
// Generated from index 'invitation_logs_id_pkey'.
func InvitationLogByID(db XODB, id string) (*InvitationLog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, trace_id, look_id, look_config_index, mech_id, mech_config_index, is_accepted, conversation_id, created_at, updated_at ` +
		`FROM custmchat.invitation_logs ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	il := InvitationLog{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&il.ID, &il.EntID, &il.TraceID, &il.LookID, &il.LookConfigIndex, &il.MechID, &il.MechConfigIndex, &il.IsAccepted, &il.ConversationID, &il.CreatedAt, &il.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &il, nil
}
