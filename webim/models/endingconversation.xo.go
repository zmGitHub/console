// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// EndingConversation represents a row from 'custmchat.ending_conversation'.
type EndingConversation struct {
	EntID             string `json:"ent_id"`              // ent_id
	NoMessageDuration int    `json:"no_message_duration"` // no_message_duration
	OfflineDuration   int    `json:"offline_duration"`    // offline_duration
	Status            bool   `json:"status"`              // status

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the EndingConversation exists in the database.
func (ec *EndingConversation) Exists() bool {
	return ec._exists
}

// Deleted provides information if the EndingConversation has been deleted from the database.
func (ec *EndingConversation) Deleted() bool {
	return ec._deleted
}

// Insert inserts the EndingConversation to the database.
func (ec *EndingConversation) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ec._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.ending_conversation (` +
		`ent_id, no_message_duration, offline_duration, status` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ec.EntID, ec.NoMessageDuration, ec.OfflineDuration, ec.Status)
	_, err = db.Exec(sqlstr, ec.EntID, ec.NoMessageDuration, ec.OfflineDuration, ec.Status)
	if err != nil {
		return err
	}

	// set existence
	ec._exists = true

	return nil
}

// Update updates the EndingConversation in the database.
func (ec *EndingConversation) Update(db XODB) error {
	var err error

	// sql query
	const sqlstr = `UPDATE custmchat.ending_conversation SET ` +
		`no_message_duration = ?, offline_duration = ?, status = ?` +
		` WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, ec.NoMessageDuration, ec.OfflineDuration, ec.Status, ec.EntID)
	_, err = db.Exec(sqlstr, ec.NoMessageDuration, ec.OfflineDuration, ec.Status, ec.EntID)
	return err
}

// Save saves the EndingConversation to the database.
func (ec *EndingConversation) Save(db XODB) error {
	if ec.Exists() {
		return ec.Update(db)
	}

	return ec.Insert(db)
}

// Delete deletes the EndingConversation from the database.
func (ec *EndingConversation) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ec._exists {
		return nil
	}

	// if deleted, bail
	if ec._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM custmchat.ending_conversation WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, ec.EntID)
	_, err = db.Exec(sqlstr, ec.EntID)
	if err != nil {
		return err
	}

	// set deleted
	ec._deleted = true

	return nil
}

// EndingConversationByEntID retrieves a row from 'custmchat.ending_conversation' as a EndingConversation.
//
// Generated from index 'ending_conversation_ent_id_pkey'.
func EndingConversationByEntID(db XODB, entID string) (*EndingConversation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ent_id, no_message_duration, offline_duration, status ` +
		`FROM custmchat.ending_conversation ` +
		`WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, entID)
	ec := EndingConversation{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, entID).Scan(&ec.EntID, &ec.NoMessageDuration, &ec.OfflineDuration, &ec.Status)
	if err != nil {
		return nil, err
	}

	return &ec, nil
}
