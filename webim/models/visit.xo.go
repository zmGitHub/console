// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"time"
)

// Visit represents a row from 'custmchat.visit'.
type Visit struct {
	ID                     string    `json:"id"`                        // id
	EntID                  string    `json:"ent_id"`                    // ent_id
	TraceID                string    `json:"trace_id"`                  // trace_id
	VisitPageCnt           int       `json:"visit_page_cnt"`            // visit_page_cnt
	ResidenceTimeSec       int       `json:"residence_time_sec"`        // residence_time_sec
	BrowserFamily          string    `json:"browser_family"`            // browser_family
	BrowserVersionString   string    `json:"browser_version_string"`    // browser_version_string
	BrowserVersion         string    `json:"browser_version"`           // browser_version
	OsCategory             string    `json:"os_category"`               // os_category
	OsFamily               string    `json:"os_family"`                 // os_family
	OsVersionString        string    `json:"os_version_string"`         // os_version_string
	OsVersion              string    `json:"os_version"`                // os_version
	Platform               string    `json:"platform"`                  // platform
	UaString               string    `json:"ua_string"`                 // ua_string
	IP                     string    `json:"ip"`                        // ip
	Country                string    `json:"country"`                   // country
	Province               string    `json:"province"`                  // province
	City                   string    `json:"city"`                      // city
	Isp                    string    `json:"isp"`                       // isp
	FirstPageSource        string    `json:"first_page_source"`         // first_page_source
	FirstPageSourceKeyword string    `json:"first_page_source_keyword"` // first_page_source_keyword
	FirstPageSourceDomain  string    `json:"first_page_source_domain"`  // first_page_source_domain
	FirstPageSourceURL     string    `json:"first_page_source_url"`     // first_page_source_url
	FirstPageTitle         string    `json:"first_page_title"`          // first_page_title
	FirstPageDomain        string    `json:"first_page_domain"`         // first_page_domain
	FirstPageURL           string    `json:"first_page_url"`            // first_page_url
	LatestTitle            string    `json:"latest_title"`              // latest_title
	LatestURL              string    `json:"latest_url"`                // latest_url
	CreatedAt              time.Time `json:"created_at"`                // created_at
	UpdatedAt              time.Time `json:"updated_at"`                // updated_at
}

// Insert inserts the Visit to the database.
func (v *Visit) Insert(db XODB) error {
	var err error

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.visit (` +
		`id, ent_id, trace_id, visit_page_cnt, residence_time_sec, browser_family, browser_version_string, browser_version, os_category, os_family, os_version_string, os_version, platform, ua_string, ip, country, province, city, isp, first_page_source, first_page_source_keyword, first_page_source_domain, first_page_source_url, first_page_title, first_page_domain, first_page_url, latest_title, latest_url, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, v.ID, v.EntID, v.TraceID, v.VisitPageCnt, v.ResidenceTimeSec, v.BrowserFamily, v.BrowserVersionString, v.BrowserVersion, v.OsCategory, v.OsFamily, v.OsVersionString, v.OsVersion, v.Platform, v.UaString, v.IP, v.Country, v.Province, v.City, v.Isp, v.FirstPageSource, v.FirstPageSourceKeyword, v.FirstPageSourceDomain, v.FirstPageSourceURL, v.FirstPageTitle, v.FirstPageDomain, v.FirstPageURL, v.LatestTitle, v.LatestURL, v.CreatedAt, v.UpdatedAt)
	_, err = db.Exec(sqlstr, v.ID, v.EntID, v.TraceID, v.VisitPageCnt, v.ResidenceTimeSec, v.BrowserFamily, v.BrowserVersionString, v.BrowserVersion, v.OsCategory, v.OsFamily, v.OsVersionString, v.OsVersion, v.Platform, v.UaString, v.IP, v.Country, v.Province, v.City, v.Isp, v.FirstPageSource, v.FirstPageSourceKeyword, v.FirstPageSourceDomain, v.FirstPageSourceURL, v.FirstPageTitle, v.FirstPageDomain, v.FirstPageURL, v.LatestTitle, v.LatestURL, v.CreatedAt, v.UpdatedAt)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the Visit in the database.
func (v *Visit) Update(db XODB) error {
	var err error

	// sql query
	const sqlstr = `UPDATE custmchat.visit SET ` +
		`ent_id = ?, trace_id = ?, visit_page_cnt = ?, residence_time_sec = ?, browser_family = ?, browser_version_string = ?, browser_version = ?, os_category = ?, os_family = ?, os_version_string = ?, os_version = ?, platform = ?, ua_string = ?, ip = ?, country = ?, province = ?, city = ?, isp = ?, first_page_source = ?, first_page_source_keyword = ?, first_page_source_domain = ?, first_page_source_url = ?, first_page_title = ?, first_page_domain = ?, first_page_url = ?, latest_title = ?, latest_url = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, v.EntID, v.TraceID, v.VisitPageCnt, v.ResidenceTimeSec, v.BrowserFamily, v.BrowserVersionString, v.BrowserVersion, v.OsCategory, v.OsFamily, v.OsVersionString, v.OsVersion, v.Platform, v.UaString, v.IP, v.Country, v.Province, v.City, v.Isp, v.FirstPageSource, v.FirstPageSourceKeyword, v.FirstPageSourceDomain, v.FirstPageSourceURL, v.FirstPageTitle, v.FirstPageDomain, v.FirstPageURL, v.LatestTitle, v.LatestURL, v.CreatedAt, v.UpdatedAt, v.ID)
	_, err = db.Exec(sqlstr, v.EntID, v.TraceID, v.VisitPageCnt, v.ResidenceTimeSec, v.BrowserFamily, v.BrowserVersionString, v.BrowserVersion, v.OsCategory, v.OsFamily, v.OsVersionString, v.OsVersion, v.Platform, v.UaString, v.IP, v.Country, v.Province, v.City, v.Isp, v.FirstPageSource, v.FirstPageSourceKeyword, v.FirstPageSourceDomain, v.FirstPageSourceURL, v.FirstPageTitle, v.FirstPageDomain, v.FirstPageURL, v.LatestTitle, v.LatestURL, v.CreatedAt, v.UpdatedAt, v.ID)
	return err
}

// Save saves the Visit to the database.
func (v *Visit) Save(db XODB) error {
	return v.Insert(db)
}

// Delete deletes the Visit from the database.
func (v *Visit) Delete(db XODB) error {
	var err error

	// sql query
	const sqlstr = `DELETE FROM custmchat.visit WHERE id = ?`

	// run query
	XOLog(sqlstr, v.ID)
	_, err = db.Exec(sqlstr, v.ID)
	if err != nil {
		return err
	}

	// set deleted
	return nil
}

// VisitsByEntIDCreatedAt retrieves a row from 'custmchat.visit' as a Visit.
//
// Generated from index 'idx_enterprise_id_created_on'.
func VisitsByEntIDCreatedAt(db XODB, entID string, createdAt time.Time) ([]*Visit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, trace_id, visit_page_cnt, residence_time_sec, browser_family, browser_version_string, browser_version, os_category, os_family, os_version_string, os_version, platform, ua_string, ip, country, province, city, isp, first_page_source, first_page_source_keyword, first_page_source_domain, first_page_source_url, first_page_title, first_page_domain, first_page_url, latest_title, latest_url, created_at, updated_at ` +
		`FROM custmchat.visit ` +
		`WHERE ent_id = ? AND created_at = ?`

	// run query
	XOLog(sqlstr, entID, createdAt)
	q, err := db.Query(sqlstr, entID, createdAt)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Visit{}
	for q.Next() {
		v := Visit{}

		// scan
		err = q.Scan(&v.ID, &v.EntID, &v.TraceID, &v.VisitPageCnt, &v.ResidenceTimeSec, &v.BrowserFamily, &v.BrowserVersionString, &v.BrowserVersion, &v.OsCategory, &v.OsFamily, &v.OsVersionString, &v.OsVersion, &v.Platform, &v.UaString, &v.IP, &v.Country, &v.Province, &v.City, &v.Isp, &v.FirstPageSource, &v.FirstPageSourceKeyword, &v.FirstPageSourceDomain, &v.FirstPageSourceURL, &v.FirstPageTitle, &v.FirstPageDomain, &v.FirstPageURL, &v.LatestTitle, &v.LatestURL, &v.CreatedAt, &v.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &v)
	}

	return res, nil
}

// VisitsByEntIDTraceID retrieves a row from 'custmchat.visit' as a Visit.
//
// Generated from index 'idx_enterprise_id_trace_id'.
func VisitsByEntIDTraceID(db XODB, entID string, traceID string) ([]*Visit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, trace_id, visit_page_cnt, residence_time_sec, browser_family, browser_version_string, browser_version, os_category, os_family, os_version_string, os_version, platform, ua_string, ip, country, province, city, isp, first_page_source, first_page_source_keyword, first_page_source_domain, first_page_source_url, first_page_title, first_page_domain, first_page_url, latest_title, latest_url, created_at, updated_at ` +
		`FROM custmchat.visit ` +
		`WHERE ent_id = ? AND trace_id = ?`

	// run query
	XOLog(sqlstr, entID, traceID)
	q, err := db.Query(sqlstr, entID, traceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Visit{}
	for q.Next() {
		v := Visit{}

		// scan
		err = q.Scan(&v.ID, &v.EntID, &v.TraceID, &v.VisitPageCnt, &v.ResidenceTimeSec, &v.BrowserFamily, &v.BrowserVersionString, &v.BrowserVersion, &v.OsCategory, &v.OsFamily, &v.OsVersionString, &v.OsVersion, &v.Platform, &v.UaString, &v.IP, &v.Country, &v.Province, &v.City, &v.Isp, &v.FirstPageSource, &v.FirstPageSourceKeyword, &v.FirstPageSourceDomain, &v.FirstPageSourceURL, &v.FirstPageTitle, &v.FirstPageDomain, &v.FirstPageURL, &v.LatestTitle, &v.LatestURL, &v.CreatedAt, &v.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &v)
	}

	return res, nil
}

// VisitByID retrieves a row from 'custmchat.visit' as a Visit.
//
// Generated from index 'visit_id_pkey'.
func VisitByID(db XODB, id string) (*Visit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, trace_id, visit_page_cnt, residence_time_sec, browser_family, browser_version_string, browser_version, os_category, os_family, os_version_string, os_version, platform, ua_string, ip, country, province, city, isp, first_page_source, first_page_source_keyword, first_page_source_domain, first_page_source_url, first_page_title, first_page_domain, first_page_url, latest_title, latest_url, created_at, updated_at ` +
		`FROM custmchat.visit ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	v := Visit{}

	err = db.QueryRow(sqlstr, id).Scan(&v.ID, &v.EntID, &v.TraceID, &v.VisitPageCnt, &v.ResidenceTimeSec, &v.BrowserFamily, &v.BrowserVersionString, &v.BrowserVersion, &v.OsCategory, &v.OsFamily, &v.OsVersionString, &v.OsVersion, &v.Platform, &v.UaString, &v.IP, &v.Country, &v.Province, &v.City, &v.Isp, &v.FirstPageSource, &v.FirstPageSourceKeyword, &v.FirstPageSourceDomain, &v.FirstPageSourceURL, &v.FirstPageTitle, &v.FirstPageDomain, &v.FirstPageURL, &v.LatestTitle, &v.LatestURL, &v.CreatedAt, &v.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &v, nil
}

func VisitIDsByEntIDTraceID(db XODB, entID, traceID string) ([]string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id ` +
		`FROM custmchat.visit ` +
		`WHERE ent_id = ? AND trace_id = ? ` +
		`ORDER BY created_at DESC ` +
		`LIMIT 1`

	// run query
	XOLog(sqlstr, entID, traceID)
	q, err := db.Query(sqlstr, entID, traceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []string
	for q.Next() {
		var id string

		// scan
		err = q.Scan(&id)
		if err != nil {
			return nil, err
		}

		res = append(res, id)
	}

	if err = q.Err(); err != nil {
		return nil, err
	}

	return res, nil
}

func (v *Visit) UpdateCountByID(db XODB) (err error) {
	const sqlstr = `UPDATE custmchat.visit SET ` +
		`visit_page_cnt = visit_page_cnt + 1, residence_time_sec = residence_time_sec + 1, latest_title = ?, latest_url = ?, updated_at = ? ` +
		` WHERE id = ?`

	XOLog(sqlstr, v.LatestTitle, v.LatestURL, v.UpdatedAt, v.ID)
	_, err = db.Exec(sqlstr, v.LatestTitle, v.LatestURL, v.UpdatedAt, v.ID)
	return err
}
