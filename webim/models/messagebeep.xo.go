// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

var (
	MessageBeepWebClientType = "web"

	MessageDesktopBeepType = "desktop"
	MessagePopupBeepType   = "popup"
)

// MessageBeep represents a row from 'custmchat.message_beep'.
type MessageBeep struct {
	AgentID                 string `json:"agent_id"`                  // agent_id
	ClientType              string `json:"client_type"`               // client_type
	BeepType                string `json:"beep_type"`                 // beep_type
	NewConversation         bool   `json:"new_conversation"`          // new_conversation
	NewMessage              bool   `json:"new_message"`               // new_message
	ConversationTransferIn  bool   `json:"conversation_transfer_in"`  // conversation_transfer_in
	ConversationTransferOut bool   `json:"conversation_transfer_out"` // conversation_transfer_out
	ColleagueConversation   bool   `json:"colleague_conversation"`    // colleague_conversation

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MessageBeep exists in the database.
func (mb *MessageBeep) Exists() bool {
	return mb._exists
}

// Deleted provides information if the MessageBeep has been deleted from the database.
func (mb *MessageBeep) Deleted() bool {
	return mb._deleted
}

// Insert inserts the MessageBeep to the database.
func (mb *MessageBeep) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if mb._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.message_beep (` +
		`agent_id, client_type, beep_type, new_conversation, new_message, conversation_transfer_in, conversation_transfer_out, colleague_conversation` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, mb.AgentID, mb.ClientType, mb.BeepType, mb.NewConversation, mb.NewMessage, mb.ConversationTransferIn, mb.ConversationTransferOut, mb.ColleagueConversation)
	_, err = db.Exec(sqlstr, mb.AgentID, mb.ClientType, mb.BeepType, mb.NewConversation, mb.NewMessage, mb.ConversationTransferIn, mb.ConversationTransferOut, mb.ColleagueConversation)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the MessageBeep in the database.
func (mb *MessageBeep) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mb._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if mb._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE custmchat.message_beep SET ` +
		`client_type = ?, beep_type = ?, new_conversation = ?, new_message = ?, conversation_transfer_in = ?, conversation_transfer_out = ?, colleague_conversation = ?` +
		` WHERE agent_id = ?`

	// run query
	XOLog(sqlstr, mb.ClientType, mb.BeepType, mb.NewConversation, mb.NewMessage, mb.ConversationTransferIn, mb.ConversationTransferOut, mb.ColleagueConversation, mb.AgentID)
	_, err = db.Exec(sqlstr, mb.ClientType, mb.BeepType, mb.NewConversation, mb.NewMessage, mb.ConversationTransferIn, mb.ConversationTransferOut, mb.ColleagueConversation, mb.AgentID)
	return err
}

// Save saves the MessageBeep to the database.
func (mb *MessageBeep) Save(db XODB) error {
	if mb.Exists() {
		return mb.Update(db)
	}

	return mb.Insert(db)
}

// Delete deletes the MessageBeep from the database.
func (mb *MessageBeep) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mb._exists {
		return nil
	}

	// if deleted, bail
	if mb._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM custmchat.message_beep WHERE agent_id = ?`

	// run query
	XOLog(sqlstr, mb.AgentID)
	_, err = db.Exec(sqlstr, mb.AgentID)
	if err != nil {
		return err
	}

	// set deleted
	mb._deleted = true

	return nil
}

// MessageBeepByAgentID retrieves a row from 'custmchat.message_beep' as a MessageBeep.
//
// Generated from index 'agent_id'.
func MessageBeepByAgentID(db XODB, agentID string) (*MessageBeep, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`agent_id, client_type, beep_type, new_conversation, new_message, conversation_transfer_in, conversation_transfer_out, colleague_conversation ` +
		`FROM custmchat.message_beep ` +
		`WHERE agent_id = ?`

	mb := MessageBeep{}
	err = db.QueryRow(sqlstr, agentID).Scan(&mb.AgentID, &mb.ClientType, &mb.BeepType, &mb.NewConversation, &mb.NewMessage, &mb.ConversationTransferIn, &mb.ConversationTransferOut, &mb.ColleagueConversation)
	if err != nil {
		return nil, err
	}

	return &mb, nil
}
