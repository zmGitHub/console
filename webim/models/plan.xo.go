// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// Plan represents a row from 'custmchat.plan'.
type Plan struct {
	ID              string `json:"id"`                // id
	PlanType        int8   `json:"plan_type"`         // plan_type
	AgentServeLimit int    `json:"agent_serve_limit"` // agent_serve_limit

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Plan exists in the database.
func (p *Plan) Exists() bool {
	return p._exists
}

// Deleted provides information if the Plan has been deleted from the database.
func (p *Plan) Deleted() bool {
	return p._deleted
}

// Insert inserts the Plan to the database.
func (p *Plan) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.plan (` +
		`id, plan_type, agent_serve_limit` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, p.ID, p.PlanType, p.AgentServeLimit)
	_, err = db.Exec(sqlstr, p.ID, p.PlanType, p.AgentServeLimit)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Update updates the Plan in the database.
func (p *Plan) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE custmchat.plan SET ` +
		`plan_type = ?, agent_serve_limit = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, p.PlanType, p.AgentServeLimit, p.ID)
	_, err = db.Exec(sqlstr, p.PlanType, p.AgentServeLimit, p.ID)
	return err
}

// Save saves the Plan to the database.
func (p *Plan) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Delete deletes the Plan from the database.
func (p *Plan) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM custmchat.plan WHERE id = ?`

	// run query
	XOLog(sqlstr, p.ID)
	_, err = db.Exec(sqlstr, p.ID)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// PlanByID retrieves a row from 'custmchat.plan' as a Plan.
//
// Generated from index 'plan_id_pkey'.
func PlanByID(db XODB, id string) (*Plan, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, plan_type, agent_serve_limit ` +
		`FROM custmchat.plan ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	p := Plan{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&p.ID, &p.PlanType, &p.AgentServeLimit)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

// PlanByPlanType retrieves a row from 'custmchat.plan' as a Plan.
//
// Generated from index 'plan_type'.
func PlanByPlanType(db XODB, planType int8) (*Plan, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, plan_type, agent_serve_limit ` +
		`FROM custmchat.plan ` +
		`WHERE plan_type = ?`

	// run query
	XOLog(sqlstr, planType)
	p := Plan{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, planType).Scan(&p.ID, &p.PlanType, &p.AgentServeLimit)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
