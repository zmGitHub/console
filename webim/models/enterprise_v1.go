// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// Enterprise represents a row from 'custmchat.enterprise'.
type EnterpriseV1 struct {
	ID               string         `json:"id"`                // id
	Name             string         `json:"name"`              // name
	AdminID          string         `json:"admin_id"`          // admin_id
	AllocationRule   string         `json:"allocation_rule"`   // allocation_rule
	FullName         string         `json:"full_name"`         // full_name
	Province         string         `json:"province"`          // province
	City             string         `json:"city"`              // city
	Avatar           string         `json:"avatar"`            // avatar
	Industry         sql.NullString `json:"industry"`          // industry
	Location         string         `json:"location"`          // location
	Address          string         `json:"address"`           // address
	Website          string         `json:"website"`           // website
	Email            string         `json:"email"`             // email
	Mobile           string         `json:"mobile"`            // mobile
	Description      sql.NullString `json:"description"`       // description
	CreatedAt        time.Time      `json:"created_at"`        // created_at
	Owner            sql.NullString `json:"owner"`             // owner
	Plan             int            `json:"plan"`              // plan
	AgentNum         int            `json:"agent_num"`         // agent_num
	TrialStatus      int            `json:"trial_status"`      // trial_status
	ExpirationTime   time.Time      `json:"expiration_time"`   // expiration_time
	LastActivatedAt  time.Time      `json:"last_activated_at"` // last_activated_at
	ContactMobile    string         `json:"contact_mobile"`    // contact_mobile
	ContactEmail     string         `json:"contact_email"`     // contact_email
	ContactQq        string         `json:"contact_qq"`        // contact_qq
	ContactWechat    string         `json:"contact_wechat"`    // contact_wechat
	ContactSignature string         `json:"contact_signature"` // contact_signature

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Enterprise exists in the database.
func (e *EnterpriseV1) Exists() bool {
	return e._exists
}

// Deleted provides information if the Enterprise has been deleted from the database.
func (e *EnterpriseV1) Deleted() bool {
	return e._deleted
}

// Insert inserts the Enterprise to the database.
func (e *EnterpriseV1) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if e._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.enterprise (` +
		`id, name, admin_id, allocation_rule, full_name, province, city, avatar, industry, location, address, website, email, mobile, description, created_at, owner, plan, agent_num, trial_status, expiration_time, last_activated_at, contact_mobile, contact_email, contact_qq, contact_wechat, contact_signature` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, e.ID, e.Name, e.AdminID, e.AllocationRule, e.FullName, e.Province, e.City, e.Avatar, e.Industry, e.Location, e.Address, e.Website, e.Email, e.Mobile, e.Description, e.CreatedAt, e.Owner, e.Plan, e.AgentNum, e.TrialStatus, e.ExpirationTime, e.LastActivatedAt, e.ContactMobile, e.ContactEmail, e.ContactQq, e.ContactWechat, e.ContactSignature)
	_, err = db.Exec(sqlstr, e.ID, e.Name, e.AdminID, e.AllocationRule, e.FullName, e.Province, e.City, e.Avatar, e.Industry, e.Location, e.Address, e.Website, e.Email, e.Mobile, e.Description, e.CreatedAt, e.Owner, e.Plan, e.AgentNum, e.TrialStatus, e.ExpirationTime, e.LastActivatedAt, e.ContactMobile, e.ContactEmail, e.ContactQq, e.ContactWechat, e.ContactSignature)
	if err != nil {
		return err
	}

	// set existence
	e._exists = true

	return nil
}

// Update updates the Enterprise in the database.
func (e *EnterpriseV1) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if e._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE custmchat.enterprise SET ` +
		`name = ?, admin_id = ?, allocation_rule = ?, full_name = ?, province = ?, city = ?, avatar = ?, industry = ?, location = ?, address = ?, website = ?, email = ?, mobile = ?, description = ?, created_at = ?, owner = ?, plan = ?, agent_num = ?, trial_status = ?, expiration_time = ?, last_activated_at = ?, contact_mobile = ?, contact_email = ?, contact_qq = ?, contact_wechat = ?, contact_signature = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, e.Name, e.AdminID, e.AllocationRule, e.FullName, e.Province, e.City, e.Avatar, e.Industry, e.Location, e.Address, e.Website, e.Email, e.Mobile, e.Description, e.CreatedAt, e.Owner, e.Plan, e.AgentNum, e.TrialStatus, e.ExpirationTime, e.LastActivatedAt, e.ContactMobile, e.ContactEmail, e.ContactQq, e.ContactWechat, e.ContactSignature, e.ID)
	_, err = db.Exec(sqlstr, e.Name, e.AdminID, e.AllocationRule, e.FullName, e.Province, e.City, e.Avatar, e.Industry, e.Location, e.Address, e.Website, e.Email, e.Mobile, e.Description, e.CreatedAt, e.Owner, e.Plan, e.AgentNum, e.TrialStatus, e.ExpirationTime, e.LastActivatedAt, e.ContactMobile, e.ContactEmail, e.ContactQq, e.ContactWechat, e.ContactSignature, e.ID)
	return err
}

// Save saves the Enterprise to the database.
func (e *EnterpriseV1) Save(db XODB) error {
	if e.Exists() {
		return e.Update(db)
	}

	return e.Insert(db)
}

// Delete deletes the Enterprise from the database.
func (e *EnterpriseV1) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return nil
	}

	// if deleted, bail
	if e._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM custmchat.enterprise WHERE id = ?`

	// run query
	XOLog(sqlstr, e.ID)
	_, err = db.Exec(sqlstr, e.ID)
	if err != nil {
		return err
	}

	// set deleted
	e._deleted = true

	return nil
}

// EnterpriseByAdminID retrieves a row from 'custmchat.enterprise' as a Enterprise.
//
// Generated from index 'admin_id'.
func EnterpriseByAdminID(db XODB, adminID string) (*EnterpriseV1, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, admin_id, allocation_rule, full_name, province, city, avatar, industry, location, address, website, email, mobile, description, created_at, owner, plan, agent_num, trial_status, expiration_time, last_activated_at, contact_mobile, contact_email, contact_qq, contact_wechat, contact_signature ` +
		`FROM custmchat.enterprise ` +
		`WHERE admin_id = ?`

	// run query
	XOLog(sqlstr, adminID)
	e := EnterpriseV1{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, adminID).Scan(&e.ID, &e.Name, &e.AdminID, &e.AllocationRule, &e.FullName, &e.Province, &e.City, &e.Avatar, &e.Industry, &e.Location, &e.Address, &e.Website, &e.Email, &e.Mobile, &e.Description, &e.CreatedAt, &e.Owner, &e.Plan, &e.AgentNum, &e.TrialStatus, &e.ExpirationTime, &e.LastActivatedAt, &e.ContactMobile, &e.ContactEmail, &e.ContactQq, &e.ContactWechat, &e.ContactSignature)
	if err != nil {
		return nil, err
	}

	return &e, nil
}

// EnterpriseV1ByEmail retrieves a row from 'custmchat.enterprise' as a Enterprise.
//
// Generated from index 'email'.
func EnterpriseV1ByEmail(db XODB, email string) (*EnterpriseV1, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, admin_id, allocation_rule, full_name, province, city, avatar, industry, location, address, website, email, mobile, description, created_at, owner, plan, agent_num, trial_status, expiration_time, last_activated_at, contact_mobile, contact_email, contact_qq, contact_wechat, contact_signature ` +
		`FROM custmchat.enterprise ` +
		`WHERE email = ?`

	// run query
	XOLog(sqlstr, email)
	e := EnterpriseV1{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, email).Scan(&e.ID, &e.Name, &e.AdminID, &e.AllocationRule, &e.FullName, &e.Province, &e.City, &e.Avatar, &e.Industry, &e.Location, &e.Address, &e.Website, &e.Email, &e.Mobile, &e.Description, &e.CreatedAt, &e.Owner, &e.Plan, &e.AgentNum, &e.TrialStatus, &e.ExpirationTime, &e.LastActivatedAt, &e.ContactMobile, &e.ContactEmail, &e.ContactQq, &e.ContactWechat, &e.ContactSignature)
	if err != nil {
		return nil, err
	}

	return &e, nil
}

// EnterpriseByID retrieves a row from 'custmchat.enterprise' as a Enterprise.
//
// Generated from index 'enterprise_id_pkey'.
func EnterpriseV1ByID(db XODB, id string) (*EnterpriseV1, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, admin_id, allocation_rule, full_name, province, city, avatar, industry, location, address, website, email, mobile, description, created_at, owner, plan, agent_num, trial_status, expiration_time, last_activated_at, contact_mobile, contact_email, contact_qq, contact_wechat, contact_signature ` +
		`FROM custmchat.enterprise ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	e := EnterpriseV1{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&e.ID, &e.Name, &e.AdminID, &e.AllocationRule, &e.FullName, &e.Province, &e.City, &e.Avatar, &e.Industry, &e.Location, &e.Address, &e.Website, &e.Email, &e.Mobile, &e.Description, &e.CreatedAt, &e.Owner, &e.Plan, &e.AgentNum, &e.TrialStatus, &e.ExpirationTime, &e.LastActivatedAt, &e.ContactMobile, &e.ContactEmail, &e.ContactQq, &e.ContactWechat, &e.ContactSignature)
	if err != nil {
		return nil, err
	}

	return &e, nil
}

// EnterprisesV1ByName retrieves a row from 'custmchat.enterprise' as a Enterprise.
//
// Generated from index 'idx_ent_name'.
func EnterprisesV1ByName(db XODB, name string) ([]*EnterpriseV1, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, admin_id, allocation_rule, full_name, province, city, avatar, industry, location, address, website, email, mobile, description, created_at, owner, plan, agent_num, trial_status, expiration_time, last_activated_at, contact_mobile, contact_email, contact_qq, contact_wechat, contact_signature ` +
		`FROM custmchat.enterprise ` +
		`WHERE name = ?`

	// run query
	XOLog(sqlstr, name)
	q, err := db.Query(sqlstr, name)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*EnterpriseV1{}
	for q.Next() {
		e := EnterpriseV1{}

		// scan
		err = q.Scan(&e.ID, &e.Name, &e.AdminID, &e.AllocationRule, &e.FullName, &e.Province, &e.City, &e.Avatar, &e.Industry, &e.Location, &e.Address, &e.Website, &e.Email, &e.Mobile, &e.Description, &e.CreatedAt, &e.Owner, &e.Plan, &e.AgentNum, &e.TrialStatus, &e.ExpirationTime, &e.LastActivatedAt, &e.ContactMobile, &e.ContactEmail, &e.ContactQq, &e.ContactWechat, &e.ContactSignature)
		if err != nil {
			return nil, err
		}

		res = append(res, &e)
	}

	return res, nil
}
