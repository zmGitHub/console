// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// TagPerm represents a row from 'custmchat.tag_perm'.
type TagPerm struct {
	ID       string    `json:"id"`        // id
	TagID    string    `json:"tag_id"`    // tag_id
	PermID   string    `json:"perm_id"`   // perm_id
	CreateAt time.Time `json:"create_at"` // create_at
	UpdateAt time.Time `json:"update_at"` // update_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the TagPerm exists in the database.
func (tp *TagPerm) Exists() bool {
	return tp._exists
}

// Deleted provides information if the TagPerm has been deleted from the database.
func (tp *TagPerm) Deleted() bool {
	return tp._deleted
}

// Insert inserts the TagPerm to the database.
func (tp *TagPerm) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if tp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.tag_perm (` +
		`id, tag_id, perm_id, create_at, update_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, tp.ID, tp.TagID, tp.PermID, tp.CreateAt, tp.UpdateAt)
	_, err = db.Exec(sqlstr, tp.ID, tp.TagID, tp.PermID, tp.CreateAt, tp.UpdateAt)
	if err != nil {
		return err
	}

	// set existence
	tp._exists = true

	return nil
}

// Update updates the TagPerm in the database.
func (tp *TagPerm) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if tp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE custmchat.tag_perm SET ` +
		`tag_id = ?, perm_id = ?, create_at = ?, update_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, tp.TagID, tp.PermID, tp.CreateAt, tp.UpdateAt, tp.ID)
	_, err = db.Exec(sqlstr, tp.TagID, tp.PermID, tp.CreateAt, tp.UpdateAt, tp.ID)
	return err
}

// Save saves the TagPerm to the database.
func (tp *TagPerm) Save(db XODB) error {
	if tp.Exists() {
		return tp.Update(db)
	}

	return tp.Insert(db)
}

// Delete deletes the TagPerm from the database.
func (tp *TagPerm) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tp._exists {
		return nil
	}

	// if deleted, bail
	if tp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM custmchat.tag_perm WHERE id = ?`

	// run query
	XOLog(sqlstr, tp.ID)
	_, err = db.Exec(sqlstr, tp.ID)
	if err != nil {
		return err
	}

	// set deleted
	tp._deleted = true

	return nil
}

// TagPermsByPermID retrieves a row from 'custmchat.tag_perm' as a TagPerm.
//
// Generated from index 'perm_id'.
func TagPermsByPermID(db XODB, permID string) ([]*TagPerm, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, tag_id, perm_id, create_at, update_at ` +
		`FROM custmchat.tag_perm ` +
		`WHERE perm_id = ?`

	// run query
	XOLog(sqlstr, permID)
	q, err := db.Query(sqlstr, permID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*TagPerm{}
	for q.Next() {
		tp := TagPerm{
			_exists: true,
		}

		// scan
		err = q.Scan(&tp.ID, &tp.TagID, &tp.PermID, &tp.CreateAt, &tp.UpdateAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &tp)
	}

	return res, nil
}

// TagPermByTagIDPermID retrieves a row from 'custmchat.tag_perm' as a TagPerm.
//
// Generated from index 'tag_id'.
func TagPermByTagIDPermID(db XODB, tagID string, permID string) (*TagPerm, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, tag_id, perm_id, create_at, update_at ` +
		`FROM custmchat.tag_perm ` +
		`WHERE tag_id = ? AND perm_id = ?`

	// run query
	XOLog(sqlstr, tagID, permID)
	tp := TagPerm{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, tagID, permID).Scan(&tp.ID, &tp.TagID, &tp.PermID, &tp.CreateAt, &tp.UpdateAt)
	if err != nil {
		return nil, err
	}

	return &tp, nil
}

// TagPermByID retrieves a row from 'custmchat.tag_perm' as a TagPerm.
//
// Generated from index 'tag_perm_id_pkey'.
func TagPermByID(db XODB, id string) (*TagPerm, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, tag_id, perm_id, create_at, update_at ` +
		`FROM custmchat.tag_perm ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	tp := TagPerm{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&tp.ID, &tp.TagID, &tp.PermID, &tp.CreateAt, &tp.UpdateAt)
	if err != nil {
		return nil, err
	}

	return &tp, nil
}
