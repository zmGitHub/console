// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"time"

	"github.com/go-sql-driver/mysql"
)

// Agent represents a row from 'custmchat.agent'.
type Agent struct {
	ID              string         `json:"id"`                        // id
	EntID           string         `json:"ent_id"`                    // ent_id
	GroupID         string         `json:"group_id"`                  // group_id
	RoleID          string         `json:"role_id"`                   // role_id
	Avatar          string         `json:"avatar"`                    // avatar
	Username        string         `json:"username"`                  // username
	RealName        string         `json:"real_name"`                 // real_name
	NickName        string         `json:"nick_name"`                 // nick_name
	HashedPassword  string         `json:"hashed_password,omitempty"` // hashed_password
	JobNumber       string         `json:"job_number"`                // job_number
	ServeLimit      int            `json:"serve_limit"`               // serve_limit
	IsOnline        bool           `json:"is_online"`                 // is_online
	Ranking         int            `json:"ranking"`                   // ranking
	Email           string         `json:"email"`                     // email
	Mobile          string         `json:"mobile"`                    // mobile
	PublicEmail     string         `json:"public_email"`              // public_email
	PublicTelephone string         `json:"public_telephone"`          // public_telephone
	QqNum           string         `json:"qq_num"`                    // qq_num
	Signature       string         `json:"signature"`                 // signature
	Status          string         `json:"status"`                    // status
	Wechat          string         `json:"wechat"`                    // wechat
	IsAdmin         int8           `json:"is_admin"`                  // is_admin
	PermsRangeType  string         `json:"perms_range_type"`          // perms_range_type
	AccountStatus   string         `json:"account_status"`            // account_status
	CreateAt        time.Time      `json:"create_at"`                 // create_at
	UpdateAt        time.Time      `json:"update_at"`                 // update_at
	DeletedAt       mysql.NullTime `json:"deleted_at"`                // deleted_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Agent exists in the database.
func (a *Agent) Exists() bool {
	return a._exists
}

// Deleted provides information if the Agent has been deleted from the database.
func (a *Agent) Deleted() bool {
	return a._deleted
}

// Insert inserts the Agent to the database.
func (a *Agent) Insert(db XODB) error {
	var err error

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.agent (` +
		`id, ent_id, group_id, role_id, avatar, username, real_name, nick_name, hashed_password, job_number, serve_limit, is_online, ranking, email, mobile, public_email, public_telephone, qq_num, signature, status, wechat, is_admin, perms_range_type, account_status, create_at, update_at, deleted_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, a.ID, a.EntID, a.GroupID, a.RoleID, a.Avatar, a.Username, a.RealName, a.NickName, a.HashedPassword, a.JobNumber, a.ServeLimit, a.IsOnline, a.Ranking, a.Email, a.Mobile, a.PublicEmail, a.PublicTelephone, a.QqNum, a.Signature, a.Status, a.Wechat, a.IsAdmin, a.PermsRangeType, a.AccountStatus, a.CreateAt, a.UpdateAt, a.DeletedAt)
	_, err = db.Exec(sqlstr, a.ID, a.EntID, a.GroupID, a.RoleID, a.Avatar, a.Username, a.RealName, a.NickName, a.HashedPassword, a.JobNumber, a.ServeLimit, a.IsOnline, a.Ranking, a.Email, a.Mobile, a.PublicEmail, a.PublicTelephone, a.QqNum, a.Signature, a.Status, a.Wechat, a.IsAdmin, a.PermsRangeType, a.AccountStatus, a.CreateAt, a.UpdateAt, a.DeletedAt)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the Agent in the database.
func (a *Agent) Update(db XODB) error {
	var err error

	// sql query
	const sqlstr = `UPDATE custmchat.agent SET ` +
		`ent_id = ?, group_id = ?, role_id = ?, avatar = ?, username = ?, real_name = ?, nick_name = ?, hashed_password = ?, job_number = ?, serve_limit = ?, is_online = ?, ranking = ?, email = ?, mobile = ?, public_email = ?, public_telephone = ?, qq_num = ?, signature = ?, status = ?, wechat = ?, is_admin = ?, perms_range_type = ?, account_status = ?, create_at = ?, update_at = ?, deleted_at = ?` +
		` WHERE id = ?`

	// run query
	_, err = db.Exec(sqlstr, a.EntID, a.GroupID, a.RoleID, a.Avatar, a.Username, a.RealName, a.NickName, a.HashedPassword, a.JobNumber, a.ServeLimit, a.IsOnline, a.Ranking, a.Email, a.Mobile, a.PublicEmail, a.PublicTelephone, a.QqNum, a.Signature, a.Status, a.Wechat, a.IsAdmin, a.PermsRangeType, a.AccountStatus, a.CreateAt, a.UpdateAt, a.DeletedAt, a.ID)
	return err
}

// Save saves the Agent to the database.
func (a *Agent) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Insert(db)
}

// Delete deletes the Agent from the database.
func (a *Agent) Delete(db XODB) error {
	var err error

	// sql query
	const sqlstr = `DELETE FROM custmchat.agent WHERE id = ?`

	// run query
	XOLog(sqlstr, a.ID)
	_, err = db.Exec(sqlstr, a.ID)
	if err != nil {
		return err
	}

	return nil
}

// AgentByID retrieves a row from 'custmchat.agent' as a Agent.
//
// Generated from index 'agent_id_pkey'.
func AgentByID(db XODB, id string) (*Agent, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, group_id, role_id, avatar, username, real_name, nick_name, hashed_password, job_number, serve_limit, is_online, ranking, email, mobile, public_email, public_telephone, qq_num, signature, status, wechat, is_admin, perms_range_type, account_status, create_at, update_at, deleted_at ` +
		`FROM custmchat.agent ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	a := Agent{}

	err = db.QueryRow(sqlstr, id).Scan(&a.ID, &a.EntID, &a.GroupID, &a.RoleID, &a.Avatar, &a.Username, &a.RealName, &a.NickName, &a.HashedPassword, &a.JobNumber, &a.ServeLimit, &a.IsOnline, &a.Ranking, &a.Email, &a.Mobile, &a.PublicEmail, &a.PublicTelephone, &a.QqNum, &a.Signature, &a.Status, &a.Wechat, &a.IsAdmin, &a.PermsRangeType, &a.AccountStatus, &a.CreateAt, &a.UpdateAt, &a.DeletedAt)
	if err != nil {
		return nil, err
	}

	return &a, nil
}

// AgentByEmail retrieves a row from 'custmchat.agent' as a Agent.
//
// Generated from index 'email'.
func AgentByEmail(db XODB, email string) (*Agent, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, group_id, role_id, avatar, username, real_name, nick_name, hashed_password, job_number, serve_limit, is_online, ranking, email, mobile, public_email, public_telephone, qq_num, signature, status, wechat, is_admin, perms_range_type, account_status, create_at, update_at, deleted_at ` +
		`FROM custmchat.agent ` +
		`WHERE email = ?`

	// run query
	XOLog(sqlstr, email)
	a := Agent{}

	err = db.QueryRow(sqlstr, email).Scan(&a.ID, &a.EntID, &a.GroupID, &a.RoleID, &a.Avatar, &a.Username, &a.RealName, &a.NickName, &a.HashedPassword, &a.JobNumber, &a.ServeLimit, &a.IsOnline, &a.Ranking, &a.Email, &a.Mobile, &a.PublicEmail, &a.PublicTelephone, &a.QqNum, &a.Signature, &a.Status, &a.Wechat, &a.IsAdmin, &a.PermsRangeType, &a.AccountStatus, &a.CreateAt, &a.UpdateAt, &a.DeletedAt)
	if err != nil {
		return nil, err
	}

	return &a, nil
}

// AgentsByEntID retrieves a row from 'custmchat.agent' as a Agent.
//
// Generated from index 'idx_ent'.
func AgentsByEntID(db XODB, entID string) ([]*Agent, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, group_id, role_id, avatar, username, real_name, nick_name, hashed_password, job_number, serve_limit, is_online, ranking, email, mobile, public_email, public_telephone, qq_num, signature, status, wechat, is_admin, perms_range_type, account_status, create_at, update_at, deleted_at ` +
		`FROM custmchat.agent ` +
		`WHERE ent_id = ? ` +
		`ORDER BY ranking ASC`

	// run query
	XOLog(sqlstr, entID)
	q, err := db.Query(sqlstr, entID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Agent{}
	for q.Next() {
		a := Agent{}

		// scan
		err = q.Scan(&a.ID, &a.EntID, &a.GroupID, &a.RoleID, &a.Avatar, &a.Username, &a.RealName, &a.NickName, &a.HashedPassword, &a.JobNumber, &a.ServeLimit, &a.IsOnline, &a.Ranking, &a.Email, &a.Mobile, &a.PublicEmail, &a.PublicTelephone, &a.QqNum, &a.Signature, &a.Status, &a.Wechat, &a.IsAdmin, &a.PermsRangeType, &a.AccountStatus, &a.CreateAt, &a.UpdateAt, &a.DeletedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &a)
	}
	if err := q.Err(); err != nil {
		return nil, err
	}

	return res, nil
}

// AgentsByGroupID retrieves a row from 'custmchat.agent' as a Agent.
//
// Generated from index 'idx_group'.
func AgentsByGroupID(db XODB, groupID string) ([]*Agent, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, group_id, role_id, avatar, username, real_name, nick_name, hashed_password, job_number, serve_limit, is_online, ranking, email, mobile, public_email, public_telephone, qq_num, signature, status, wechat, is_admin, perms_range_type, account_status, create_at, update_at, deleted_at ` +
		`FROM custmchat.agent ` +
		`WHERE group_id = ?`

	// run query
	XOLog(sqlstr, groupID)
	q, err := db.Query(sqlstr, groupID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Agent{}
	for q.Next() {
		a := Agent{
			_exists: true,
		}

		// scan
		err = q.Scan(&a.ID, &a.EntID, &a.GroupID, &a.RoleID, &a.Avatar, &a.Username, &a.RealName, &a.NickName, &a.HashedPassword, &a.JobNumber, &a.ServeLimit, &a.IsOnline, &a.Ranking, &a.Email, &a.Mobile, &a.PublicEmail, &a.PublicTelephone, &a.QqNum, &a.Signature, &a.Status, &a.Wechat, &a.IsAdmin, &a.PermsRangeType, &a.AccountStatus, &a.CreateAt, &a.UpdateAt, &a.DeletedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &a)
	}

	return res, nil
}

// AgentsByRoleID retrieves a row from 'custmchat.agent' as a Agent.
//
// Generated from index 'idx_role'.
func AgentsByRoleID(db XODB, roleID string) ([]*Agent, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, group_id, role_id, avatar, username, real_name, nick_name, hashed_password, job_number, serve_limit, is_online, ranking, email, mobile, public_email, public_telephone, qq_num, signature, status, wechat, is_admin, perms_range_type, account_status, create_at, update_at, deleted_at ` +
		`FROM custmchat.agent ` +
		`WHERE role_id = ?`

	// run query
	XOLog(sqlstr, roleID)
	q, err := db.Query(sqlstr, roleID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Agent{}
	for q.Next() {
		a := Agent{
			_exists: true,
		}

		// scan
		err = q.Scan(&a.ID, &a.EntID, &a.GroupID, &a.RoleID, &a.Avatar, &a.Username, &a.RealName, &a.NickName, &a.HashedPassword, &a.JobNumber, &a.ServeLimit, &a.IsOnline, &a.Ranking, &a.Email, &a.Mobile, &a.PublicEmail, &a.PublicTelephone, &a.QqNum, &a.Signature, &a.Status, &a.Wechat, &a.IsAdmin, &a.PermsRangeType, &a.AccountStatus, &a.CreateAt, &a.UpdateAt, &a.DeletedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &a)
	}

	return res, nil
}

// AgentByMobile retrieves a row from 'custmchat.agent' as a Agent.
//
// Generated from index 'mobile'.
func AgentByMobile(db XODB, mobile string) (*Agent, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, group_id, role_id, avatar, username, real_name, nick_name, hashed_password, job_number, serve_limit, is_online, ranking, email, mobile, public_email, public_telephone, qq_num, signature, status, wechat, is_admin, perms_range_type, account_status, create_at, update_at, deleted_at ` +
		`FROM custmchat.agent ` +
		`WHERE mobile = ?`

	// run query
	XOLog(sqlstr, mobile)
	a := Agent{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, mobile).Scan(&a.ID, &a.EntID, &a.GroupID, &a.RoleID, &a.Avatar, &a.Username, &a.RealName, &a.NickName, &a.HashedPassword, &a.JobNumber, &a.ServeLimit, &a.IsOnline, &a.Ranking, &a.Email, &a.Mobile, &a.PublicEmail, &a.PublicTelephone, &a.QqNum, &a.Signature, &a.Status, &a.Wechat, &a.IsAdmin, &a.PermsRangeType, &a.AccountStatus, &a.CreateAt, &a.UpdateAt, &a.DeletedAt)
	if err != nil {
		return nil, err
	}

	return &a, nil
}

// AgentByUsername retrieves a row from 'custmchat.agent' as a Agent.
//
// Generated from index 'username'.
func AgentByUsername(db XODB, username string) (*Agent, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, group_id, role_id, avatar, username, real_name, nick_name, hashed_password, job_number, serve_limit, is_online, ranking, email, mobile, public_email, public_telephone, qq_num, signature, status, wechat, is_admin, perms_range_type, account_status, create_at, update_at, deleted_at ` +
		`FROM custmchat.agent ` +
		`WHERE username = ?`

	// run query
	XOLog(sqlstr, username)
	a := Agent{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, username).Scan(&a.ID, &a.EntID, &a.GroupID, &a.RoleID, &a.Avatar, &a.Username, &a.RealName, &a.NickName, &a.HashedPassword, &a.JobNumber, &a.ServeLimit, &a.IsOnline, &a.Ranking, &a.Email, &a.Mobile, &a.PublicEmail, &a.PublicTelephone, &a.QqNum, &a.Signature, &a.Status, &a.Wechat, &a.IsAdmin, &a.PermsRangeType, &a.AccountStatus, &a.CreateAt, &a.UpdateAt, &a.DeletedAt)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
