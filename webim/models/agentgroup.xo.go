// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

// AgentGroup represents a row from 'custmchat.agent_group'.
type AgentGroup struct {
	ID          string `json:"id"`          // id
	EntID       string `json:"ent_id"`      // ent_id
	Name        string `json:"name"`        // name
	Description string `json:"description"` // description

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AgentGroup exists in the database.
func (ag *AgentGroup) Exists() bool {
	return ag._exists
}

// Deleted provides information if the AgentGroup has been deleted from the database.
func (ag *AgentGroup) Deleted() bool {
	return ag._deleted
}

// Insert inserts the AgentGroup to the database.
func (ag *AgentGroup) Insert(db XODB) error {
	var err error

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.agent_group (` +
		`id, ent_id, name, description` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ag.ID, ag.EntID, ag.Name, ag.Description)
	_, err = db.Exec(sqlstr, ag.ID, ag.EntID, ag.Name, ag.Description)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the AgentGroup in the database.
func (ag *AgentGroup) Update(db XODB) error {
	var err error

	// sql query
	const sqlstr = `UPDATE custmchat.agent_group SET ` +
		`ent_id = ?, name = ?, description = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ag.EntID, ag.Name, ag.Description, ag.ID)
	_, err = db.Exec(sqlstr, ag.EntID, ag.Name, ag.Description, ag.ID)
	return err
}

// Save saves the AgentGroup to the database.
func (ag *AgentGroup) Save(db XODB) error {
	if ag.Exists() {
		return ag.Update(db)
	}

	return ag.Insert(db)
}

// Delete deletes the AgentGroup from the database.
func (ag *AgentGroup) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ag._exists {
		return nil
	}

	// if deleted, bail
	if ag._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM custmchat.agent_group WHERE id = ?`

	// run query
	XOLog(sqlstr, ag.ID)
	_, err = db.Exec(sqlstr, ag.ID)
	if err != nil {
		return err
	}

	// set deleted
	ag._deleted = true

	return nil
}

// AgentGroupByID retrieves a row from 'custmchat.agent_group' as a AgentGroup.
//
// Generated from index 'agent_group_id_pkey'.
func AgentGroupByID(db XODB, id string) (*AgentGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, name, description ` +
		`FROM custmchat.agent_group ` +
		`WHERE id = ?`

	ag := AgentGroup{}

	err = db.QueryRow(sqlstr, id).Scan(&ag.ID, &ag.EntID, &ag.Name, &ag.Description)
	if err != nil {
		return nil, err
	}

	return &ag, nil
}

// AgentGroupsByEntID retrieves a row from 'custmchat.agent_group' as a AgentGroup.
//
// Generated from index 'idx_ent'.
func AgentGroupsByEntID(db XODB, entID string) ([]*AgentGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, name, description ` +
		`FROM custmchat.agent_group ` +
		`WHERE ent_id = ?`

	// run query
	XOLog(sqlstr, entID)
	q, err := db.Query(sqlstr, entID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*AgentGroup
	for q.Next() {
		ag := AgentGroup{
			_exists: true,
		}

		// scan
		err = q.Scan(&ag.ID, &ag.EntID, &ag.Name, &ag.Description)
		if err != nil {
			return nil, err
		}

		res = append(res, &ag)
	}

	if err := q.Err(); err != nil {
		return nil, err
	}

	return res, nil
}
