// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"time"
)

// QuickreplyItem represents a row from 'custmchat.quickreply_item'.
type QuickreplyItem struct {
	ID                string         `json:"id"`                  // id
	QuickreplyGroupID string         `json:"quickreply_group_id"` // quickreply_group_id
	Title             string         `json:"title"`               // title
	Content           string         `json:"content"`             // content
	ContentType       string         `json:"content_type"`        // content_type
	RichContent       sql.NullString `json:"rich_content"`        // rich_content
	Rank              int            `json:"rank"`                // rank
	HotKey            string         `json:"hot_key"`             // hot_key
	CreatedBy         string         `json:"created_by"`          // created_by
	CreatedAt         time.Time      `json:"created_at"`          // created_at
	UpdatedAt         time.Time      `json:"updated_at"`          // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the QuickreplyItem exists in the database.
func (qi *QuickreplyItem) Exists() bool {
	return qi._exists
}

// Deleted provides information if the QuickreplyItem has been deleted from the database.
func (qi *QuickreplyItem) Deleted() bool {
	return qi._deleted
}

// Insert inserts the QuickreplyItem to the database.
func (qi *QuickreplyItem) Insert(db XODB) error {
	var err error

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.quickreply_item (` +
		`id, quickreply_group_id, title, content, content_type, rich_content, rank, hot_key, created_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	_, err = db.Exec(sqlstr, qi.ID, qi.QuickreplyGroupID, qi.Title, qi.Content, qi.ContentType, qi.RichContent, qi.Rank, qi.HotKey, qi.CreatedBy, qi.CreatedAt, qi.UpdatedAt)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the QuickreplyItem in the database.
func (qi *QuickreplyItem) Update(db XODB) error {
	var err error

	// sql query
	const sqlstr = `UPDATE custmchat.quickreply_item SET ` +
		`quickreply_group_id = ?, title = ?, content = ?, content_type = ?, rich_content = ?, rank = ?, hot_key=?, created_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	_, err = db.Exec(sqlstr, qi.QuickreplyGroupID, qi.Title, qi.Content, qi.ContentType, qi.RichContent, qi.Rank, qi.HotKey, qi.CreatedBy, qi.CreatedAt, qi.UpdatedAt, qi.ID)
	return err
}

// Save saves the QuickreplyItem to the database.
func (qi *QuickreplyItem) Save(db XODB) error {
	if qi.Exists() {
		return qi.Update(db)
	}

	return qi.Insert(db)
}

// Delete deletes the QuickreplyItem from the database.
func (qi *QuickreplyItem) Delete(db XODB) error {
	var err error
	const sqlstr = `DELETE FROM custmchat.quickreply_item WHERE id = ?`
	_, err = db.Exec(sqlstr, qi.ID)
	if err != nil {
		return err
	}

	return nil
}

// QuickreplyItemByID retrieves a row from 'custmchat.quickreply_item' as a QuickreplyItem.
//
// Generated from index 'quickreply_item_id_pkey'.
func QuickreplyItemByID(db XODB, id string) (*QuickreplyItem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, quickreply_group_id, title, content, content_type, rich_content, rank, hot_key, created_by, created_at, updated_at ` +
		`FROM custmchat.quickreply_item ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	qi := QuickreplyItem{}

	err = db.QueryRow(sqlstr, id).Scan(&qi.ID, &qi.QuickreplyGroupID, &qi.Title, &qi.Content, &qi.ContentType, &qi.RichContent, &qi.Rank, &qi.HotKey, &qi.CreatedBy, &qi.CreatedAt, &qi.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &qi, nil
}
