// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"time"
)

// PrechatForm represents a row from 'custmchat.prechat_form'.
type PrechatForm struct {
	ID         string         `json:"id"`          // id
	EntID      string         `json:"ent_id"`      // ent_id
	Status     bool           `json:"status"`      // status
	Title      string         `json:"title"`       // title
	FormFields sql.NullString `json:"form_fields"` // form_fields
	CreatedAt  time.Time      `json:"created_at"`  // created_at
	UpdatedAt  time.Time      `json:"updated_at"`  // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PrechatForm exists in the database.
func (pf *PrechatForm) Exists() bool {
	return pf._exists
}

// Deleted provides information if the PrechatForm has been deleted from the database.
func (pf *PrechatForm) Deleted() bool {
	return pf._deleted
}

// Insert inserts the PrechatForm to the database.
func (pf *PrechatForm) Insert(db XODB) error {
	var err error

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.prechat_form (` +
		`id, ent_id, status, title, form_fields, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pf.ID, pf.EntID, pf.Status, pf.Title, pf.FormFields, pf.CreatedAt, pf.UpdatedAt)
	_, err = db.Exec(sqlstr, pf.ID, pf.EntID, pf.Status, pf.Title, pf.FormFields, pf.CreatedAt, pf.UpdatedAt)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the PrechatForm in the database.
func (pf *PrechatForm) Update(db XODB) error {
	var err error

	// sql query
	const sqlstr = `UPDATE custmchat.prechat_form SET ` +
		`ent_id = ?, status = ?, title = ?, form_fields = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, pf.EntID, pf.Status, pf.Title, pf.FormFields, pf.CreatedAt, pf.UpdatedAt, pf.ID)
	_, err = db.Exec(sqlstr, pf.EntID, pf.Status, pf.Title, pf.FormFields, pf.CreatedAt, pf.UpdatedAt, pf.ID)
	return err
}

// Save saves the PrechatForm to the database.
func (pf *PrechatForm) Save(db XODB) error {
	if pf.Exists() {
		return pf.Update(db)
	}

	return pf.Insert(db)
}

// Delete deletes the PrechatForm from the database.
func (pf *PrechatForm) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pf._exists {
		return nil
	}

	// if deleted, bail
	if pf._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM custmchat.prechat_form WHERE id = ?`

	// run query
	XOLog(sqlstr, pf.ID)
	_, err = db.Exec(sqlstr, pf.ID)
	if err != nil {
		return err
	}

	// set deleted
	pf._deleted = true

	return nil
}

func PrechatFormsByEntID(db XODB, entID string) (pf *PrechatForm, err error) {
	query := `SELECT ` +
		`id, ent_id, status, title, form_fields, created_at, updated_at ` +
		`FROM custmchat.prechat_form ` +
		`WHERE ent_id = ?`

	pf = &PrechatForm{}
	err = db.QueryRow(query, entID).Scan(&pf.ID, &pf.EntID, &pf.Status, &pf.Title, &pf.FormFields, &pf.CreatedAt, &pf.UpdatedAt)
	if err != nil {
		return nil, err
	}
	return pf, nil
}

// PrechatFormByID retrieves a row from 'custmchat.prechat_form' as a PrechatForm.
//
// Generated from index 'prechat_form_id_pkey'.
func PrechatFormByID(db XODB, id string) (*PrechatForm, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ent_id, status, title, form_fields, created_at, updated_at ` +
		`FROM custmchat.prechat_form ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	pf := PrechatForm{}

	err = db.QueryRow(sqlstr, id).Scan(&pf.ID, &pf.EntID, &pf.Status, &pf.Title, &pf.FormFields, &pf.CreatedAt, &pf.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &pf, nil
}
