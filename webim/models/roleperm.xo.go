// Package models contains the types for schema 'custmchat'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// RolePerm represents a row from 'custmchat.role_perm'.
type RolePerm struct {
	RoleID    string    `json:"role_id"`    // role_id
	PermID    string    `json:"perm_id"`    // perm_id
	CreatedAt time.Time `json:"created_at"` // created_at
	UpdatedAt time.Time `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the RolePerm exists in the database.
func (rp *RolePerm) Exists() bool {
	return rp._exists
}

// Deleted provides information if the RolePerm has been deleted from the database.
func (rp *RolePerm) Deleted() bool {
	return rp._deleted
}

// Insert inserts the RolePerm to the database.
func (rp *RolePerm) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if rp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO custmchat.role_perm (` +
		`role_id, perm_id, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, rp.RoleID, rp.PermID, rp.CreatedAt, rp.UpdatedAt)
	_, err = db.Exec(sqlstr, rp.RoleID, rp.PermID, rp.CreatedAt, rp.UpdatedAt)
	if err != nil {
		return err
	}

	// set existence
	rp._exists = true

	return nil
}

// Update updates the RolePerm in the database.
func (rp *RolePerm) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !rp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if rp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query with composite primary key
	const sqlstr = `UPDATE custmchat.role_perm SET ` +
		`created_at = ?, updated_at = ?` +
		` WHERE role_id = ? AND perm_id = ?`

	// run query
	XOLog(sqlstr, rp.CreatedAt, rp.UpdatedAt, rp.RoleID, rp.PermID)
	_, err = db.Exec(sqlstr, rp.CreatedAt, rp.UpdatedAt, rp.RoleID, rp.PermID)
	return err
}

// Save saves the RolePerm to the database.
func (rp *RolePerm) Save(db XODB) error {
	if rp.Exists() {
		return rp.Update(db)
	}

	return rp.Insert(db)
}

// Delete deletes the RolePerm from the database.
func (rp *RolePerm) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !rp._exists {
		return nil
	}

	// if deleted, bail
	if rp._deleted {
		return nil
	}

	// sql query with composite primary key
	const sqlstr = `DELETE FROM custmchat.role_perm WHERE role_id = ? AND perm_id = ?`

	// run query
	XOLog(sqlstr, rp.RoleID, rp.PermID)
	_, err = db.Exec(sqlstr, rp.RoleID, rp.PermID)
	if err != nil {
		return err
	}

	// set deleted
	rp._deleted = true

	return nil
}

// RolePermsByPermID retrieves a row from 'custmchat.role_perm' as a RolePerm.
//
// Generated from index 'perm_id'.
func RolePermsByPermID(db XODB, permID string) ([]*RolePerm, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`role_id, perm_id, created_at, updated_at ` +
		`FROM custmchat.role_perm ` +
		`WHERE perm_id = ?`

	// run query
	XOLog(sqlstr, permID)
	q, err := db.Query(sqlstr, permID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*RolePerm{}
	for q.Next() {
		rp := RolePerm{
			_exists: true,
		}

		// scan
		err = q.Scan(&rp.RoleID, &rp.PermID, &rp.CreatedAt, &rp.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &rp)
	}

	return res, nil
}

// RolePermsByRoleID retrieves a row from 'custmchat.role_perm' as a RolePerm.
//
// Generated from index 'role_id'.
func RolePermsByRoleID(db XODB, roleID string) ([]*RolePerm, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`role_id, perm_id, created_at, updated_at ` +
		`FROM custmchat.role_perm ` +
		`WHERE role_id = ?`

	// run query
	XOLog(sqlstr, roleID)

	rows, err := db.Query(sqlstr, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var res []*RolePerm
	for rows.Next() {
		rp := RolePerm{}
		if err = rows.Scan(&rp.RoleID, &rp.PermID, &rp.CreatedAt, &rp.UpdatedAt); err != nil {
			return nil, err
		}

		res = append(res, &rp)
	}

	if err = rows.Err(); err != nil {
		return nil, err
	}

	return res, nil
}

// RolePermByPermID retrieves a row from 'custmchat.role_perm' as a RolePerm.
//
// Generated from index 'role_perm_perm_id_pkey'.
func RolePermByPermID(db XODB, permID string) (*RolePerm, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`role_id, perm_id, created_at, updated_at ` +
		`FROM custmchat.role_perm ` +
		`WHERE perm_id = ?`

	// run query
	XOLog(sqlstr, permID)
	rp := RolePerm{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, permID).Scan(&rp.RoleID, &rp.PermID, &rp.CreatedAt, &rp.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &rp, nil
}
